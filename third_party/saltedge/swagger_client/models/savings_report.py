# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'per_month': 'list[SavingsReportPerMonth]',
        'average': 'SavingsReportAverage',
        'forecasted_average': 'SavingsReportForecastedAverage',
        'runway': 'float',
        'expense_to_savings_rate': 'float',
        'stress_runway': 'float',
        'income_stability': 'float',
        'income_regularity': 'float',
        'income_to_expense_rate': 'float'
    }

    attribute_map = {
        'per_month': 'per_month',
        'average': 'average',
        'forecasted_average': 'forecasted_average',
        'runway': 'runway',
        'expense_to_savings_rate': 'expense_to_savings_rate',
        'stress_runway': 'stress_runway',
        'income_stability': 'income_stability',
        'income_regularity': 'income_regularity',
        'income_to_expense_rate': 'income_to_expense_rate'
    }

    def __init__(self, per_month=None, average=None, forecasted_average=None, runway=None, expense_to_savings_rate=None, stress_runway=None, income_stability=None, income_regularity=None, income_to_expense_rate=None):  # noqa: E501
        """SavingsReport - a model defined in Swagger"""  # noqa: E501
        self._per_month = None
        self._average = None
        self._forecasted_average = None
        self._runway = None
        self._expense_to_savings_rate = None
        self._stress_runway = None
        self._income_stability = None
        self._income_regularity = None
        self._income_to_expense_rate = None
        self.discriminator = None
        self.per_month = per_month
        self.average = average
        self.forecasted_average = forecasted_average
        self.runway = runway
        self.expense_to_savings_rate = expense_to_savings_rate
        self.stress_runway = stress_runway
        self.income_stability = income_stability
        self.income_regularity = income_regularity
        self.income_to_expense_rate = income_to_expense_rate

    @property
    def per_month(self):
        """Gets the per_month of this SavingsReport.  # noqa: E501

        information related to net savings per each month  # noqa: E501

        :return: The per_month of this SavingsReport.  # noqa: E501
        :rtype: list[SavingsReportPerMonth]
        """
        return self._per_month

    @per_month.setter
    def per_month(self, per_month):
        """Sets the per_month of this SavingsReport.

        information related to net savings per each month  # noqa: E501

        :param per_month: The per_month of this SavingsReport.  # noqa: E501
        :type: list[SavingsReportPerMonth]
        """
        if per_month is None:
            raise ValueError("Invalid value for `per_month`, must not be `None`")  # noqa: E501

        self._per_month = per_month

    @property
    def average(self):
        """Gets the average of this SavingsReport.  # noqa: E501


        :return: The average of this SavingsReport.  # noqa: E501
        :rtype: SavingsReportAverage
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this SavingsReport.


        :param average: The average of this SavingsReport.  # noqa: E501
        :type: SavingsReportAverage
        """
        if average is None:
            raise ValueError("Invalid value for `average`, must not be `None`")  # noqa: E501

        self._average = average

    @property
    def forecasted_average(self):
        """Gets the forecasted_average of this SavingsReport.  # noqa: E501


        :return: The forecasted_average of this SavingsReport.  # noqa: E501
        :rtype: SavingsReportForecastedAverage
        """
        return self._forecasted_average

    @forecasted_average.setter
    def forecasted_average(self, forecasted_average):
        """Sets the forecasted_average of this SavingsReport.


        :param forecasted_average: The forecasted_average of this SavingsReport.  # noqa: E501
        :type: SavingsReportForecastedAverage
        """
        if forecasted_average is None:
            raise ValueError("Invalid value for `forecasted_average`, must not be `None`")  # noqa: E501

        self._forecasted_average = forecasted_average

    @property
    def runway(self):
        """Gets the runway of this SavingsReport.  # noqa: E501

        provides an estimate (number of months) on how long the customer's current balance will be sufficient until they run out of money. The customer's income and expenses are taken into account.  <strong>Note:</strong> This indicator is calculated only for cases when the customer has positive current balance and the amount of their expenses exceeds the amount of their income   # noqa: E501

        :return: The runway of this SavingsReport.  # noqa: E501
        :rtype: float
        """
        return self._runway

    @runway.setter
    def runway(self, runway):
        """Sets the runway of this SavingsReport.

        provides an estimate (number of months) on how long the customer's current balance will be sufficient until they run out of money. The customer's income and expenses are taken into account.  <strong>Note:</strong> This indicator is calculated only for cases when the customer has positive current balance and the amount of their expenses exceeds the amount of their income   # noqa: E501

        :param runway: The runway of this SavingsReport.  # noqa: E501
        :type: float
        """
        if runway is None:
            raise ValueError("Invalid value for `runway`, must not be `None`")  # noqa: E501

        self._runway = runway

    @property
    def expense_to_savings_rate(self):
        """Gets the expense_to_savings_rate of this SavingsReport.  # noqa: E501

        shows whether the customer increases or loses his capital. Taking into account the customer's income and expenses, this indicator shows the number of months during which the customer's savings are either increased or reduced by an amount equal to 1 month of expenses.  <strong>Note:</strong> This indicator is calculated only for cases when the customer has both savings/dissavings and expenses   # noqa: E501

        :return: The expense_to_savings_rate of this SavingsReport.  # noqa: E501
        :rtype: float
        """
        return self._expense_to_savings_rate

    @expense_to_savings_rate.setter
    def expense_to_savings_rate(self, expense_to_savings_rate):
        """Sets the expense_to_savings_rate of this SavingsReport.

        shows whether the customer increases or loses his capital. Taking into account the customer's income and expenses, this indicator shows the number of months during which the customer's savings are either increased or reduced by an amount equal to 1 month of expenses.  <strong>Note:</strong> This indicator is calculated only for cases when the customer has both savings/dissavings and expenses   # noqa: E501

        :param expense_to_savings_rate: The expense_to_savings_rate of this SavingsReport.  # noqa: E501
        :type: float
        """
        if expense_to_savings_rate is None:
            raise ValueError("Invalid value for `expense_to_savings_rate`, must not be `None`")  # noqa: E501

        self._expense_to_savings_rate = expense_to_savings_rate

    @property
    def stress_runway(self):
        """Gets the stress_runway of this SavingsReport.  # noqa: E501

        provides an estimate (number of months) on how long the customer's current balance will be sufficient to cover their regular expenses in case they unexpectedly stops receiving income.  <strong>Note:</strong> This indicator is calculated for all cases, except the one, when the customer has no expenses   # noqa: E501

        :return: The stress_runway of this SavingsReport.  # noqa: E501
        :rtype: float
        """
        return self._stress_runway

    @stress_runway.setter
    def stress_runway(self, stress_runway):
        """Sets the stress_runway of this SavingsReport.

        provides an estimate (number of months) on how long the customer's current balance will be sufficient to cover their regular expenses in case they unexpectedly stops receiving income.  <strong>Note:</strong> This indicator is calculated for all cases, except the one, when the customer has no expenses   # noqa: E501

        :param stress_runway: The stress_runway of this SavingsReport.  # noqa: E501
        :type: float
        """
        if stress_runway is None:
            raise ValueError("Invalid value for `stress_runway`, must not be `None`")  # noqa: E501

        self._stress_runway = stress_runway

    @property
    def income_stability(self):
        """Gets the income_stability of this SavingsReport.  # noqa: E501

        average weighted stability of income from all the sources  <strong>Note:</strong> it is close to `1`, if customer has stable income   # noqa: E501

        :return: The income_stability of this SavingsReport.  # noqa: E501
        :rtype: float
        """
        return self._income_stability

    @income_stability.setter
    def income_stability(self, income_stability):
        """Sets the income_stability of this SavingsReport.

        average weighted stability of income from all the sources  <strong>Note:</strong> it is close to `1`, if customer has stable income   # noqa: E501

        :param income_stability: The income_stability of this SavingsReport.  # noqa: E501
        :type: float
        """
        if income_stability is None:
            raise ValueError("Invalid value for `income_stability`, must not be `None`")  # noqa: E501

        self._income_stability = income_stability

    @property
    def income_regularity(self):
        """Gets the income_regularity of this SavingsReport.  # noqa: E501

        average weighted regularity of income from all the sources  <strong>Note:</strong> it is close to `1`, if customer has regular income   # noqa: E501

        :return: The income_regularity of this SavingsReport.  # noqa: E501
        :rtype: float
        """
        return self._income_regularity

    @income_regularity.setter
    def income_regularity(self, income_regularity):
        """Sets the income_regularity of this SavingsReport.

        average weighted regularity of income from all the sources  <strong>Note:</strong> it is close to `1`, if customer has regular income   # noqa: E501

        :param income_regularity: The income_regularity of this SavingsReport.  # noqa: E501
        :type: float
        """
        if income_regularity is None:
            raise ValueError("Invalid value for `income_regularity`, must not be `None`")  # noqa: E501

        self._income_regularity = income_regularity

    @property
    def income_to_expense_rate(self):
        """Gets the income_to_expense_rate of this SavingsReport.  # noqa: E501

        ratio of average monthly income to average monthly expense\"  # noqa: E501

        :return: The income_to_expense_rate of this SavingsReport.  # noqa: E501
        :rtype: float
        """
        return self._income_to_expense_rate

    @income_to_expense_rate.setter
    def income_to_expense_rate(self, income_to_expense_rate):
        """Sets the income_to_expense_rate of this SavingsReport.

        ratio of average monthly income to average monthly expense\"  # noqa: E501

        :param income_to_expense_rate: The income_to_expense_rate of this SavingsReport.  # noqa: E501
        :type: float
        """
        if income_to_expense_rate is None:
            raise ValueError("Invalid value for `income_to_expense_rate`, must not be `None`")  # noqa: E501

        self._income_to_expense_rate = income_to_expense_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
