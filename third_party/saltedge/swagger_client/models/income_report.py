# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncomeReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'date',
        'end_date': 'date',
        'transactions_count': 'int',
        'last_year_amount': 'float',
        'total': 'float',
        'total_per_month': 'list[IncomeReportTotalPerMonth]',
        'average': 'IncomeReportAverage',
        'forecasted_average': 'IncomeReportForecastedAverage',
        'streams': 'IncomeReportStreams'
    }

    attribute_map = {
        'start_date': 'start_date',
        'end_date': 'end_date',
        'transactions_count': 'transactions_count',
        'last_year_amount': 'last_year_amount',
        'total': 'total',
        'total_per_month': 'total_per_month',
        'average': 'average',
        'forecasted_average': 'forecasted_average',
        'streams': 'streams'
    }

    def __init__(self, start_date=None, end_date=None, transactions_count=None, last_year_amount=None, total=None, total_per_month=None, average=None, forecasted_average=None, streams=None):  # noqa: E501
        """IncomeReport - a model defined in Swagger"""  # noqa: E501
        self._start_date = None
        self._end_date = None
        self._transactions_count = None
        self._last_year_amount = None
        self._total = None
        self._total_per_month = None
        self._average = None
        self._forecasted_average = None
        self._streams = None
        self.discriminator = None
        self.start_date = start_date
        self.end_date = end_date
        self.transactions_count = transactions_count
        self.last_year_amount = last_year_amount
        self.total = total
        self.total_per_month = total_per_month
        self.average = average
        self.forecasted_average = forecasted_average
        self.streams = streams

    @property
    def start_date(self):
        """Gets the start_date of this IncomeReport.  # noqa: E501

        the date of the first income/expense [transaction](#transactions)  # noqa: E501

        :return: The start_date of this IncomeReport.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this IncomeReport.

        the date of the first income/expense [transaction](#transactions)  # noqa: E501

        :param start_date: The start_date of this IncomeReport.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this IncomeReport.  # noqa: E501

        the date of the last income/expense [transaction](#transactions)  # noqa: E501

        :return: The end_date of this IncomeReport.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this IncomeReport.

        the date of the last income/expense [transaction](#transactions)  # noqa: E501

        :param end_date: The end_date of this IncomeReport.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def transactions_count(self):
        """Gets the transactions_count of this IncomeReport.  # noqa: E501

        number of income/expense [transactions](#transactions)  # noqa: E501

        :return: The transactions_count of this IncomeReport.  # noqa: E501
        :rtype: int
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this IncomeReport.

        number of income/expense [transactions](#transactions)  # noqa: E501

        :param transactions_count: The transactions_count of this IncomeReport.  # noqa: E501
        :type: int
        """
        if transactions_count is None:
            raise ValueError("Invalid value for `transactions_count`, must not be `None`")  # noqa: E501

        self._transactions_count = transactions_count

    @property
    def last_year_amount(self):
        """Gets the last_year_amount of this IncomeReport.  # noqa: E501

        total amount of income/expense for the last fully covered 12 months  # noqa: E501

        :return: The last_year_amount of this IncomeReport.  # noqa: E501
        :rtype: float
        """
        return self._last_year_amount

    @last_year_amount.setter
    def last_year_amount(self, last_year_amount):
        """Sets the last_year_amount of this IncomeReport.

        total amount of income/expense for the last fully covered 12 months  # noqa: E501

        :param last_year_amount: The last_year_amount of this IncomeReport.  # noqa: E501
        :type: float
        """
        if last_year_amount is None:
            raise ValueError("Invalid value for `last_year_amount`, must not be `None`")  # noqa: E501

        self._last_year_amount = last_year_amount

    @property
    def total(self):
        """Gets the total of this IncomeReport.  # noqa: E501

        total amount of income/expense per the calculated period  # noqa: E501

        :return: The total of this IncomeReport.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this IncomeReport.

        total amount of income/expense per the calculated period  # noqa: E501

        :param total: The total of this IncomeReport.  # noqa: E501
        :type: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def total_per_month(self):
        """Gets the total_per_month of this IncomeReport.  # noqa: E501

        total amount of income/expense per each month  # noqa: E501

        :return: The total_per_month of this IncomeReport.  # noqa: E501
        :rtype: list[IncomeReportTotalPerMonth]
        """
        return self._total_per_month

    @total_per_month.setter
    def total_per_month(self, total_per_month):
        """Sets the total_per_month of this IncomeReport.

        total amount of income/expense per each month  # noqa: E501

        :param total_per_month: The total_per_month of this IncomeReport.  # noqa: E501
        :type: list[IncomeReportTotalPerMonth]
        """
        if total_per_month is None:
            raise ValueError("Invalid value for `total_per_month`, must not be `None`")  # noqa: E501

        self._total_per_month = total_per_month

    @property
    def average(self):
        """Gets the average of this IncomeReport.  # noqa: E501


        :return: The average of this IncomeReport.  # noqa: E501
        :rtype: IncomeReportAverage
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this IncomeReport.


        :param average: The average of this IncomeReport.  # noqa: E501
        :type: IncomeReportAverage
        """
        if average is None:
            raise ValueError("Invalid value for `average`, must not be `None`")  # noqa: E501

        self._average = average

    @property
    def forecasted_average(self):
        """Gets the forecasted_average of this IncomeReport.  # noqa: E501


        :return: The forecasted_average of this IncomeReport.  # noqa: E501
        :rtype: IncomeReportForecastedAverage
        """
        return self._forecasted_average

    @forecasted_average.setter
    def forecasted_average(self, forecasted_average):
        """Sets the forecasted_average of this IncomeReport.


        :param forecasted_average: The forecasted_average of this IncomeReport.  # noqa: E501
        :type: IncomeReportForecastedAverage
        """
        if forecasted_average is None:
            raise ValueError("Invalid value for `forecasted_average`, must not be `None`")  # noqa: E501

        self._forecasted_average = forecasted_average

    @property
    def streams(self):
        """Gets the streams of this IncomeReport.  # noqa: E501


        :return: The streams of this IncomeReport.  # noqa: E501
        :rtype: IncomeReportStreams
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this IncomeReport.


        :param streams: The streams of this IncomeReport.  # noqa: E501
        :type: IncomeReportStreams
        """
        if streams is None:
            raise ValueError("Invalid value for `streams`, must not be `None`")  # noqa: E501

        self._streams = streams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncomeReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncomeReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
