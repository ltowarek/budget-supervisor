# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionExtra(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_balance_snapshot': 'float',
        'account_number': 'str',
        'additional': 'str',
        'asset_amount': 'float',
        'asset_code': 'str',
        'categorization_confidence': 'float',
        'check_number': 'str',
        'closing_balance': 'float',
        'constant_code': 'str',
        'convert': 'bool',
        'customer_category_code': 'str',
        'customer_category_name': 'str',
        'id': 'str',
        'information': 'str',
        'mcc': 'str',
        'merchant_id': 'str',
        'opening_balance': 'float',
        'installment_debt_amount': 'float',
        'original_amount': 'float',
        'original_category': 'str',
        'original_currency_code': 'str',
        'original_subcategory': 'str',
        'payee': 'str',
        'payee_information': 'str',
        'payer': 'str',
        'payer_information': 'str',
        'possible_duplicate': 'bool',
        'posting_date': 'date',
        'posting_time': 'str',
        'record_number': 'str',
        'specific_code': 'str',
        'tags': 'list[str]',
        'time': 'str',
        'transfer_account_name': 'str',
        'type': 'str',
        'unit_price': 'float',
        'units': 'float',
        'variable_code': 'str'
    }

    attribute_map = {
        'account_balance_snapshot': 'account_balance_snapshot',
        'account_number': 'account_number',
        'additional': 'additional',
        'asset_amount': 'asset_amount',
        'asset_code': 'asset_code',
        'categorization_confidence': 'categorization_confidence',
        'check_number': 'check_number',
        'closing_balance': 'closing_balance',
        'constant_code': 'constant_code',
        'convert': 'convert',
        'customer_category_code': 'customer_category_code',
        'customer_category_name': 'customer_category_name',
        'id': 'id',
        'information': 'information',
        'mcc': 'mcc',
        'merchant_id': 'merchant_id',
        'opening_balance': 'opening_balance',
        'installment_debt_amount': 'installment_debt_amount',
        'original_amount': 'original_amount',
        'original_category': 'original_category',
        'original_currency_code': 'original_currency_code',
        'original_subcategory': 'original_subcategory',
        'payee': 'payee',
        'payee_information': 'payee_information',
        'payer': 'payer',
        'payer_information': 'payer_information',
        'possible_duplicate': 'possible_duplicate',
        'posting_date': 'posting_date',
        'posting_time': 'posting_time',
        'record_number': 'record_number',
        'specific_code': 'specific_code',
        'tags': 'tags',
        'time': 'time',
        'transfer_account_name': 'transfer_account_name',
        'type': 'type',
        'unit_price': 'unit_price',
        'units': 'units',
        'variable_code': 'variable_code'
    }

    def __init__(self, account_balance_snapshot=None, account_number=None, additional=None, asset_amount=None, asset_code=None, categorization_confidence=None, check_number=None, closing_balance=None, constant_code=None, convert=None, customer_category_code=None, customer_category_name=None, id=None, information=None, mcc=None, merchant_id=None, opening_balance=None, installment_debt_amount=None, original_amount=None, original_category=None, original_currency_code=None, original_subcategory=None, payee=None, payee_information=None, payer=None, payer_information=None, possible_duplicate=None, posting_date=None, posting_time=None, record_number=None, specific_code=None, tags=None, time=None, transfer_account_name=None, type=None, unit_price=None, units=None, variable_code=None):  # noqa: E501
        """TransactionExtra - a model defined in Swagger"""  # noqa: E501
        self._account_balance_snapshot = None
        self._account_number = None
        self._additional = None
        self._asset_amount = None
        self._asset_code = None
        self._categorization_confidence = None
        self._check_number = None
        self._closing_balance = None
        self._constant_code = None
        self._convert = None
        self._customer_category_code = None
        self._customer_category_name = None
        self._id = None
        self._information = None
        self._mcc = None
        self._merchant_id = None
        self._opening_balance = None
        self._installment_debt_amount = None
        self._original_amount = None
        self._original_category = None
        self._original_currency_code = None
        self._original_subcategory = None
        self._payee = None
        self._payee_information = None
        self._payer = None
        self._payer_information = None
        self._possible_duplicate = None
        self._posting_date = None
        self._posting_time = None
        self._record_number = None
        self._specific_code = None
        self._tags = None
        self._time = None
        self._transfer_account_name = None
        self._type = None
        self._unit_price = None
        self._units = None
        self._variable_code = None
        self.discriminator = None
        if account_balance_snapshot is not None:
            self.account_balance_snapshot = account_balance_snapshot
        if account_number is not None:
            self.account_number = account_number
        if additional is not None:
            self.additional = additional
        if asset_amount is not None:
            self.asset_amount = asset_amount
        if asset_code is not None:
            self.asset_code = asset_code
        if categorization_confidence is not None:
            self.categorization_confidence = categorization_confidence
        if check_number is not None:
            self.check_number = check_number
        if closing_balance is not None:
            self.closing_balance = closing_balance
        if constant_code is not None:
            self.constant_code = constant_code
        if convert is not None:
            self.convert = convert
        if customer_category_code is not None:
            self.customer_category_code = customer_category_code
        if customer_category_name is not None:
            self.customer_category_name = customer_category_name
        if id is not None:
            self.id = id
        if information is not None:
            self.information = information
        if mcc is not None:
            self.mcc = mcc
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if opening_balance is not None:
            self.opening_balance = opening_balance
        if installment_debt_amount is not None:
            self.installment_debt_amount = installment_debt_amount
        if original_amount is not None:
            self.original_amount = original_amount
        if original_category is not None:
            self.original_category = original_category
        if original_currency_code is not None:
            self.original_currency_code = original_currency_code
        if original_subcategory is not None:
            self.original_subcategory = original_subcategory
        if payee is not None:
            self.payee = payee
        if payee_information is not None:
            self.payee_information = payee_information
        if payer is not None:
            self.payer = payer
        if payer_information is not None:
            self.payer_information = payer_information
        if possible_duplicate is not None:
            self.possible_duplicate = possible_duplicate
        if posting_date is not None:
            self.posting_date = posting_date
        if posting_time is not None:
            self.posting_time = posting_time
        if record_number is not None:
            self.record_number = record_number
        if specific_code is not None:
            self.specific_code = specific_code
        if tags is not None:
            self.tags = tags
        if time is not None:
            self.time = time
        if transfer_account_name is not None:
            self.transfer_account_name = transfer_account_name
        if type is not None:
            self.type = type
        if unit_price is not None:
            self.unit_price = unit_price
        if units is not None:
            self.units = units
        if variable_code is not None:
            self.variable_code = variable_code

    @property
    def account_balance_snapshot(self):
        """Gets the account_balance_snapshot of this TransactionExtra.  # noqa: E501

        balance of the account at the moment of the attempt when the transaction was imported  # noqa: E501

        :return: The account_balance_snapshot of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._account_balance_snapshot

    @account_balance_snapshot.setter
    def account_balance_snapshot(self, account_balance_snapshot):
        """Sets the account_balance_snapshot of this TransactionExtra.

        balance of the account at the moment of the attempt when the transaction was imported  # noqa: E501

        :param account_balance_snapshot: The account_balance_snapshot of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._account_balance_snapshot = account_balance_snapshot

    @property
    def account_number(self):
        """Gets the account_number of this TransactionExtra.  # noqa: E501

        number of the account the transaction belongs to  # noqa: E501

        :return: The account_number of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this TransactionExtra.

        number of the account the transaction belongs to  # noqa: E501

        :param account_number: The account_number of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def additional(self):
        """Gets the additional of this TransactionExtra.  # noqa: E501

        additional information (recommended to use in concatenation with original description, if present)  # noqa: E501

        :return: The additional of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._additional

    @additional.setter
    def additional(self, additional):
        """Sets the additional of this TransactionExtra.

        additional information (recommended to use in concatenation with original description, if present)  # noqa: E501

        :param additional: The additional of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._additional = additional

    @property
    def asset_amount(self):
        """Gets the asset_amount of this TransactionExtra.  # noqa: E501

        original transaction amount in asset units  # noqa: E501

        :return: The asset_amount of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._asset_amount

    @asset_amount.setter
    def asset_amount(self, asset_amount):
        """Sets the asset_amount of this TransactionExtra.

        original transaction amount in asset units  # noqa: E501

        :param asset_amount: The asset_amount of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._asset_amount = asset_amount

    @property
    def asset_code(self):
        """Gets the asset_code of this TransactionExtra.  # noqa: E501

        asset common used abbreviation (Ex.: `BTC` - Bitcoin, `XAU` - Gold etc.)  # noqa: E501

        :return: The asset_code of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._asset_code

    @asset_code.setter
    def asset_code(self, asset_code):
        """Sets the asset_code of this TransactionExtra.

        asset common used abbreviation (Ex.: `BTC` - Bitcoin, `XAU` - Gold etc.)  # noqa: E501

        :param asset_code: The asset_code of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._asset_code = asset_code

    @property
    def categorization_confidence(self):
        """Gets the categorization_confidence of this TransactionExtra.  # noqa: E501

        value from `0` to `1`, the probability that the current category is the correct one  # noqa: E501

        :return: The categorization_confidence of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._categorization_confidence

    @categorization_confidence.setter
    def categorization_confidence(self, categorization_confidence):
        """Sets the categorization_confidence of this TransactionExtra.

        value from `0` to `1`, the probability that the current category is the correct one  # noqa: E501

        :param categorization_confidence: The categorization_confidence of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._categorization_confidence = categorization_confidence

    @property
    def check_number(self):
        """Gets the check_number of this TransactionExtra.  # noqa: E501

        payee's transaction check number  # noqa: E501

        :return: The check_number of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this TransactionExtra.

        payee's transaction check number  # noqa: E501

        :param check_number: The check_number of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._check_number = check_number

    @property
    def closing_balance(self):
        """Gets the closing_balance of this TransactionExtra.  # noqa: E501

        account balance after the transaction was imported  # noqa: E501

        :return: The closing_balance of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._closing_balance

    @closing_balance.setter
    def closing_balance(self, closing_balance):
        """Sets the closing_balance of this TransactionExtra.

        account balance after the transaction was imported  # noqa: E501

        :param closing_balance: The closing_balance of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._closing_balance = closing_balance

    @property
    def constant_code(self):
        """Gets the constant_code of this TransactionExtra.  # noqa: E501

        payment reference for cashless domestic payments (transfers)  # noqa: E501

        :return: The constant_code of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._constant_code

    @constant_code.setter
    def constant_code(self, constant_code):
        """Sets the constant_code of this TransactionExtra.

        payment reference for cashless domestic payments (transfers)  # noqa: E501

        :param constant_code: The constant_code of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._constant_code = constant_code

    @property
    def convert(self):
        """Gets the convert of this TransactionExtra.  # noqa: E501

        whether the transaction amount was converted using exchange rates or not  # noqa: E501

        :return: The convert of this TransactionExtra.  # noqa: E501
        :rtype: bool
        """
        return self._convert

    @convert.setter
    def convert(self, convert):
        """Sets the convert of this TransactionExtra.

        whether the transaction amount was converted using exchange rates or not  # noqa: E501

        :param convert: The convert of this TransactionExtra.  # noqa: E501
        :type: bool
        """

        self._convert = convert

    @property
    def customer_category_code(self):
        """Gets the customer_category_code of this TransactionExtra.  # noqa: E501

        the category (present in [categories](#categories) list) that was categorized by the rules [created](#categories-learn) by the customer  # noqa: E501

        :return: The customer_category_code of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._customer_category_code

    @customer_category_code.setter
    def customer_category_code(self, customer_category_code):
        """Sets the customer_category_code of this TransactionExtra.

        the category (present in [categories](#categories) list) that was categorized by the rules [created](#categories-learn) by the customer  # noqa: E501

        :param customer_category_code: The customer_category_code of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._customer_category_code = customer_category_code

    @property
    def customer_category_name(self):
        """Gets the customer_category_name of this TransactionExtra.  # noqa: E501

        the category (not present in [categories](#categories) list) that was categorized by the rules [created](#categories-learn) by the customer  # noqa: E501

        :return: The customer_category_name of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._customer_category_name

    @customer_category_name.setter
    def customer_category_name(self, customer_category_name):
        """Sets the customer_category_name of this TransactionExtra.

        the category (not present in [categories](#categories) list) that was categorized by the rules [created](#categories-learn) by the customer  # noqa: E501

        :param customer_category_name: The customer_category_name of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._customer_category_name = customer_category_name

    @property
    def id(self):
        """Gets the id of this TransactionExtra.  # noqa: E501

        transaction's identifier on the bank's end (do not confuse it with Salt Edge transaction `id`)  # noqa: E501

        :return: The id of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionExtra.

        transaction's identifier on the bank's end (do not confuse it with Salt Edge transaction `id`)  # noqa: E501

        :param id: The id of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def information(self):
        """Gets the information of this TransactionExtra.  # noqa: E501

        information about the transaction  # noqa: E501

        :return: The information of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this TransactionExtra.

        information about the transaction  # noqa: E501

        :param information: The information of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._information = information

    @property
    def mcc(self):
        """Gets the mcc of this TransactionExtra.  # noqa: E501

        the transaction's [Merchant Category Code](http://www.irs.gov/irb/2004-31_IRB/ar17.html)  # noqa: E501

        :return: The mcc of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this TransactionExtra.

        the transaction's [Merchant Category Code](http://www.irs.gov/irb/2004-31_IRB/ar17.html)  # noqa: E501

        :param mcc: The mcc of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._mcc = mcc

    @property
    def merchant_id(self):
        """Gets the merchant_id of this TransactionExtra.  # noqa: E501

        merchant's identifier  # noqa: E501

        :return: The merchant_id of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this TransactionExtra.

        merchant's identifier  # noqa: E501

        :param merchant_id: The merchant_id of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def opening_balance(self):
        """Gets the opening_balance of this TransactionExtra.  # noqa: E501

        account balance before the transaction was imported  # noqa: E501

        :return: The opening_balance of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._opening_balance

    @opening_balance.setter
    def opening_balance(self, opening_balance):
        """Sets the opening_balance of this TransactionExtra.

        account balance before the transaction was imported  # noqa: E501

        :param opening_balance: The opening_balance of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._opening_balance = opening_balance

    @property
    def installment_debt_amount(self):
        """Gets the installment_debt_amount of this TransactionExtra.  # noqa: E501

        amount of installment transactions group  # noqa: E501

        :return: The installment_debt_amount of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._installment_debt_amount

    @installment_debt_amount.setter
    def installment_debt_amount(self, installment_debt_amount):
        """Sets the installment_debt_amount of this TransactionExtra.

        amount of installment transactions group  # noqa: E501

        :param installment_debt_amount: The installment_debt_amount of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._installment_debt_amount = installment_debt_amount

    @property
    def original_amount(self):
        """Gets the original_amount of this TransactionExtra.  # noqa: E501

        native amount of the transaction in transaction's currency (comes with `original_currency_code`)  # noqa: E501

        :return: The original_amount of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this TransactionExtra.

        native amount of the transaction in transaction's currency (comes with `original_currency_code`)  # noqa: E501

        :param original_amount: The original_amount of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._original_amount = original_amount

    @property
    def original_category(self):
        """Gets the original_category of this TransactionExtra.  # noqa: E501

        the original category of the transaction  # noqa: E501

        :return: The original_category of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._original_category

    @original_category.setter
    def original_category(self, original_category):
        """Sets the original_category of this TransactionExtra.

        the original category of the transaction  # noqa: E501

        :param original_category: The original_category of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._original_category = original_category

    @property
    def original_currency_code(self):
        """Gets the original_currency_code of this TransactionExtra.  # noqa: E501

        native currency of the transaction (comes with `original_amount`)  # noqa: E501

        :return: The original_currency_code of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._original_currency_code

    @original_currency_code.setter
    def original_currency_code(self, original_currency_code):
        """Sets the original_currency_code of this TransactionExtra.

        native currency of the transaction (comes with `original_amount`)  # noqa: E501

        :param original_currency_code: The original_currency_code of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._original_currency_code = original_currency_code

    @property
    def original_subcategory(self):
        """Gets the original_subcategory of this TransactionExtra.  # noqa: E501

        the original subcategory of the transaction  # noqa: E501

        :return: The original_subcategory of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._original_subcategory

    @original_subcategory.setter
    def original_subcategory(self, original_subcategory):
        """Sets the original_subcategory of this TransactionExtra.

        the original subcategory of the transaction  # noqa: E501

        :param original_subcategory: The original_subcategory of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._original_subcategory = original_subcategory

    @property
    def payee(self):
        """Gets the payee of this TransactionExtra.  # noqa: E501

        to whom the money was paid  # noqa: E501

        :return: The payee of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this TransactionExtra.

        to whom the money was paid  # noqa: E501

        :param payee: The payee of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._payee = payee

    @property
    def payee_information(self):
        """Gets the payee_information of this TransactionExtra.  # noqa: E501

        additional payee information  # noqa: E501

        :return: The payee_information of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._payee_information

    @payee_information.setter
    def payee_information(self, payee_information):
        """Sets the payee_information of this TransactionExtra.

        additional payee information  # noqa: E501

        :param payee_information: The payee_information of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._payee_information = payee_information

    @property
    def payer(self):
        """Gets the payer of this TransactionExtra.  # noqa: E501

        who paid the money  # noqa: E501

        :return: The payer of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._payer

    @payer.setter
    def payer(self, payer):
        """Sets the payer of this TransactionExtra.

        who paid the money  # noqa: E501

        :param payer: The payer of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._payer = payer

    @property
    def payer_information(self):
        """Gets the payer_information of this TransactionExtra.  # noqa: E501

        additional payer information  # noqa: E501

        :return: The payer_information of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._payer_information

    @payer_information.setter
    def payer_information(self, payer_information):
        """Sets the payer_information of this TransactionExtra.

        additional payer information  # noqa: E501

        :param payer_information: The payer_information of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._payer_information = payer_information

    @property
    def possible_duplicate(self):
        """Gets the possible_duplicate of this TransactionExtra.  # noqa: E501

        is set to `true` if current transaction duplicates `amount`, `made_on` and `currency_code` of any transaction parsed in previous attempt  # noqa: E501

        :return: The possible_duplicate of this TransactionExtra.  # noqa: E501
        :rtype: bool
        """
        return self._possible_duplicate

    @possible_duplicate.setter
    def possible_duplicate(self, possible_duplicate):
        """Sets the possible_duplicate of this TransactionExtra.

        is set to `true` if current transaction duplicates `amount`, `made_on` and `currency_code` of any transaction parsed in previous attempt  # noqa: E501

        :param possible_duplicate: The possible_duplicate of this TransactionExtra.  # noqa: E501
        :type: bool
        """

        self._possible_duplicate = possible_duplicate

    @property
    def posting_date(self):
        """Gets the posting_date of this TransactionExtra.  # noqa: E501

        date when the transaction appears in statement  # noqa: E501

        :return: The posting_date of this TransactionExtra.  # noqa: E501
        :rtype: date
        """
        return self._posting_date

    @posting_date.setter
    def posting_date(self, posting_date):
        """Sets the posting_date of this TransactionExtra.

        date when the transaction appears in statement  # noqa: E501

        :param posting_date: The posting_date of this TransactionExtra.  # noqa: E501
        :type: date
        """

        self._posting_date = posting_date

    @property
    def posting_time(self):
        """Gets the posting_time of this TransactionExtra.  # noqa: E501

        time in `HH:MM:SS` format, representing time when the transaction appears in statement  # noqa: E501

        :return: The posting_time of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._posting_time

    @posting_time.setter
    def posting_time(self, posting_time):
        """Sets the posting_time of this TransactionExtra.

        time in `HH:MM:SS` format, representing time when the transaction appears in statement  # noqa: E501

        :param posting_time: The posting_time of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._posting_time = posting_time

    @property
    def record_number(self):
        """Gets the record_number of this TransactionExtra.  # noqa: E501

        bank record number  # noqa: E501

        :return: The record_number of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._record_number

    @record_number.setter
    def record_number(self, record_number):
        """Sets the record_number of this TransactionExtra.

        bank record number  # noqa: E501

        :param record_number: The record_number of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._record_number = record_number

    @property
    def specific_code(self):
        """Gets the specific_code of this TransactionExtra.  # noqa: E501

        additional identification information for cashless domestic payments (transfers)  # noqa: E501

        :return: The specific_code of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._specific_code

    @specific_code.setter
    def specific_code(self, specific_code):
        """Sets the specific_code of this TransactionExtra.

        additional identification information for cashless domestic payments (transfers)  # noqa: E501

        :param specific_code: The specific_code of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._specific_code = specific_code

    @property
    def tags(self):
        """Gets the tags of this TransactionExtra.  # noqa: E501

        user defined information in the bank or e-wallet interface, assigned to a transaction record (not category)  # noqa: E501

        :return: The tags of this TransactionExtra.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TransactionExtra.

        user defined information in the bank or e-wallet interface, assigned to a transaction record (not category)  # noqa: E501

        :param tags: The tags of this TransactionExtra.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def time(self):
        """Gets the time of this TransactionExtra.  # noqa: E501

        time when the transaction was made  # noqa: E501

        :return: The time of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TransactionExtra.

        time when the transaction was made  # noqa: E501

        :param time: The time of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def transfer_account_name(self):
        """Gets the transfer_account_name of this TransactionExtra.  # noqa: E501

        name of the linked account  # noqa: E501

        :return: The transfer_account_name of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._transfer_account_name

    @transfer_account_name.setter
    def transfer_account_name(self, transfer_account_name):
        """Sets the transfer_account_name of this TransactionExtra.

        name of the linked account  # noqa: E501

        :param transfer_account_name: The transfer_account_name of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._transfer_account_name = transfer_account_name

    @property
    def type(self):
        """Gets the type of this TransactionExtra.  # noqa: E501

        transaction type  # noqa: E501

        :return: The type of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionExtra.

        transaction type  # noqa: E501

        :param type: The type of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unit_price(self):
        """Gets the unit_price of this TransactionExtra.  # noqa: E501

        price per unit (used with units, available for investment accounts nature only)  # noqa: E501

        :return: The unit_price of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this TransactionExtra.

        price per unit (used with units, available for investment accounts nature only)  # noqa: E501

        :param unit_price: The unit_price of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def units(self):
        """Gets the units of this TransactionExtra.  # noqa: E501

        amount of units owned (used with unit_price, available for investment accounts nature only)  # noqa: E501

        :return: The units of this TransactionExtra.  # noqa: E501
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this TransactionExtra.

        amount of units owned (used with unit_price, available for investment accounts nature only)  # noqa: E501

        :param units: The units of this TransactionExtra.  # noqa: E501
        :type: float
        """

        self._units = units

    @property
    def variable_code(self):
        """Gets the variable_code of this TransactionExtra.  # noqa: E501

        identifies the tax subject to the tax office, used for domestic payments (transfers)  # noqa: E501

        :return: The variable_code of this TransactionExtra.  # noqa: E501
        :rtype: str
        """
        return self._variable_code

    @variable_code.setter
    def variable_code(self, variable_code):
        """Sets the variable_code of this TransactionExtra.

        identifies the tax subject to the tax office, used for domestic payments (transfers)  # noqa: E501

        :param variable_code: The variable_code of this TransactionExtra.  # noqa: E501
        :type: str
        """

        self._variable_code = variable_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionExtra, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionExtra):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
