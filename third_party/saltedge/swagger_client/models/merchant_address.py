# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'transliterated_city': 'str',
        'state': 'str',
        'street': 'str',
        'transliterated_street': 'str',
        'country_code': 'str',
        'post_code': 'str',
        'coordinates': 'str',
        'building_name': 'str',
        'shop_number': 'str'
    }

    attribute_map = {
        'city': 'city',
        'transliterated_city': 'transliterated_city',
        'state': 'state',
        'street': 'street',
        'transliterated_street': 'transliterated_street',
        'country_code': 'country_code',
        'post_code': 'post_code',
        'coordinates': 'coordinates',
        'building_name': 'building_name',
        'shop_number': 'shop_number'
    }

    def __init__(self, city=None, transliterated_city=None, state=None, street=None, transliterated_street=None, country_code=None, post_code=None, coordinates=None, building_name=None, shop_number=None):  # noqa: E501
        """MerchantAddress - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._transliterated_city = None
        self._state = None
        self._street = None
        self._transliterated_street = None
        self._country_code = None
        self._post_code = None
        self._coordinates = None
        self._building_name = None
        self._shop_number = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if transliterated_city is not None:
            self.transliterated_city = transliterated_city
        if state is not None:
            self.state = state
        if street is not None:
            self.street = street
        if transliterated_street is not None:
            self.transliterated_street = transliterated_street
        if country_code is not None:
            self.country_code = country_code
        if post_code is not None:
            self.post_code = post_code
        if coordinates is not None:
            self.coordinates = coordinates
        if building_name is not None:
            self.building_name = building_name
        if shop_number is not None:
            self.shop_number = shop_number

    @property
    def city(self):
        """Gets the city of this MerchantAddress.  # noqa: E501


        :return: The city of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MerchantAddress.


        :param city: The city of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def transliterated_city(self):
        """Gets the transliterated_city of this MerchantAddress.  # noqa: E501


        :return: The transliterated_city of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._transliterated_city

    @transliterated_city.setter
    def transliterated_city(self, transliterated_city):
        """Sets the transliterated_city of this MerchantAddress.


        :param transliterated_city: The transliterated_city of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._transliterated_city = transliterated_city

    @property
    def state(self):
        """Gets the state of this MerchantAddress.  # noqa: E501


        :return: The state of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MerchantAddress.


        :param state: The state of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this MerchantAddress.  # noqa: E501


        :return: The street of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this MerchantAddress.


        :param street: The street of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def transliterated_street(self):
        """Gets the transliterated_street of this MerchantAddress.  # noqa: E501


        :return: The transliterated_street of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._transliterated_street

    @transliterated_street.setter
    def transliterated_street(self, transliterated_street):
        """Sets the transliterated_street of this MerchantAddress.


        :param transliterated_street: The transliterated_street of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._transliterated_street = transliterated_street

    @property
    def country_code(self):
        """Gets the country_code of this MerchantAddress.  # noqa: E501


        :return: The country_code of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this MerchantAddress.


        :param country_code: The country_code of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def post_code(self):
        """Gets the post_code of this MerchantAddress.  # noqa: E501


        :return: The post_code of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this MerchantAddress.


        :param post_code: The post_code of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def coordinates(self):
        """Gets the coordinates of this MerchantAddress.  # noqa: E501


        :return: The coordinates of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this MerchantAddress.


        :param coordinates: The coordinates of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._coordinates = coordinates

    @property
    def building_name(self):
        """Gets the building_name of this MerchantAddress.  # noqa: E501


        :return: The building_name of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this MerchantAddress.


        :param building_name: The building_name of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._building_name = building_name

    @property
    def shop_number(self):
        """Gets the shop_number of this MerchantAddress.  # noqa: E501


        :return: The shop_number of this MerchantAddress.  # noqa: E501
        :rtype: str
        """
        return self._shop_number

    @shop_number.setter
    def shop_number(self, shop_number):
        """Sets the shop_number of this MerchantAddress.


        :param shop_number: The shop_number of this MerchantAddress.  # noqa: E501
        :type: str
        """

        self._shop_number = shop_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
