# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Rate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'rate': 'float',
        'fail': 'bool',
        'issued_on': 'date'
    }

    attribute_map = {
        'currency_code': 'currency_code',
        'rate': 'rate',
        'fail': 'fail',
        'issued_on': 'issued_on'
    }

    def __init__(self, currency_code=None, rate=None, fail=None, issued_on=None):  # noqa: E501
        """Rate - a model defined in Swagger"""  # noqa: E501
        self._currency_code = None
        self._rate = None
        self._fail = None
        self._issued_on = None
        self.discriminator = None
        self.currency_code = currency_code
        self.rate = rate
        self.fail = fail
        self.issued_on = issued_on

    @property
    def currency_code(self):
        """Gets the currency_code of this Rate.  # noqa: E501

        the code of the currency  # noqa: E501

        :return: The currency_code of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Rate.

        the code of the currency  # noqa: E501

        :param currency_code: The currency_code of this Rate.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def rate(self):
        """Gets the rate of this Rate.  # noqa: E501

        the ratio of the currency in relation to the `USD` currency  # noqa: E501

        :return: The rate of this Rate.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Rate.

        the ratio of the currency in relation to the `USD` currency  # noqa: E501

        :param rate: The rate of this Rate.  # noqa: E501
        :type: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")  # noqa: E501

        self._rate = rate

    @property
    def fail(self):
        """Gets the fail of this Rate.  # noqa: E501

        the field which shows if we have an up-to-date rate for the currency. If the flag is `true`, it means that the rate has been taken from the previous available date  # noqa: E501

        :return: The fail of this Rate.  # noqa: E501
        :rtype: bool
        """
        return self._fail

    @fail.setter
    def fail(self, fail):
        """Sets the fail of this Rate.

        the field which shows if we have an up-to-date rate for the currency. If the flag is `true`, it means that the rate has been taken from the previous available date  # noqa: E501

        :param fail: The fail of this Rate.  # noqa: E501
        :type: bool
        """
        if fail is None:
            raise ValueError("Invalid value for `fail`, must not be `None`")  # noqa: E501

        self._fail = fail

    @property
    def issued_on(self):
        """Gets the issued_on of this Rate.  # noqa: E501

        the date the rate has been issued on  # noqa: E501

        :return: The issued_on of this Rate.  # noqa: E501
        :rtype: date
        """
        return self._issued_on

    @issued_on.setter
    def issued_on(self, issued_on):
        """Sets the issued_on of this Rate.

        the date the rate has been issued on  # noqa: E501

        :param issued_on: The issued_on of this Rate.  # noqa: E501
        :type: date
        """
        if issued_on is None:
            raise ValueError("Invalid value for `issued_on`, must not be `None`")  # noqa: E501

        self._issued_on = issued_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
