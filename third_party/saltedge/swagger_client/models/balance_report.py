# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalanceReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_amount': 'float',
        'end_date_amount': 'float',
        'minimum': 'float',
        'maximum': 'float',
        'average': 'BalanceReportAverage',
        'forecasted_average': 'BalanceReportForecastedAverage'
    }

    attribute_map = {
        'start_date_amount': 'start_date_amount',
        'end_date_amount': 'end_date_amount',
        'minimum': 'minimum',
        'maximum': 'maximum',
        'average': 'average',
        'forecasted_average': 'forecasted_average'
    }

    def __init__(self, start_date_amount=None, end_date_amount=None, minimum=None, maximum=None, average=None, forecasted_average=None):  # noqa: E501
        """BalanceReport - a model defined in Swagger"""  # noqa: E501
        self._start_date_amount = None
        self._end_date_amount = None
        self._minimum = None
        self._maximum = None
        self._average = None
        self._forecasted_average = None
        self.discriminator = None
        self.start_date_amount = start_date_amount
        self.end_date_amount = end_date_amount
        self.minimum = minimum
        self.maximum = maximum
        self.average = average
        self.forecasted_average = forecasted_average

    @property
    def start_date_amount(self):
        """Gets the start_date_amount of this BalanceReport.  # noqa: E501

        opening balance. The balance before the first [transaction](#transactions) was imported  # noqa: E501

        :return: The start_date_amount of this BalanceReport.  # noqa: E501
        :rtype: float
        """
        return self._start_date_amount

    @start_date_amount.setter
    def start_date_amount(self, start_date_amount):
        """Sets the start_date_amount of this BalanceReport.

        opening balance. The balance before the first [transaction](#transactions) was imported  # noqa: E501

        :param start_date_amount: The start_date_amount of this BalanceReport.  # noqa: E501
        :type: float
        """
        if start_date_amount is None:
            raise ValueError("Invalid value for `start_date_amount`, must not be `None`")  # noqa: E501

        self._start_date_amount = start_date_amount

    @property
    def end_date_amount(self):
        """Gets the end_date_amount of this BalanceReport.  # noqa: E501

        closing balance. The balance after the last [transaction](#transactions) was imported  # noqa: E501

        :return: The end_date_amount of this BalanceReport.  # noqa: E501
        :rtype: float
        """
        return self._end_date_amount

    @end_date_amount.setter
    def end_date_amount(self, end_date_amount):
        """Sets the end_date_amount of this BalanceReport.

        closing balance. The balance after the last [transaction](#transactions) was imported  # noqa: E501

        :param end_date_amount: The end_date_amount of this BalanceReport.  # noqa: E501
        :type: float
        """
        if end_date_amount is None:
            raise ValueError("Invalid value for `end_date_amount`, must not be `None`")  # noqa: E501

        self._end_date_amount = end_date_amount

    @property
    def minimum(self):
        """Gets the minimum of this BalanceReport.  # noqa: E501

        The minimum balance registered for the report's date range  # noqa: E501

        :return: The minimum of this BalanceReport.  # noqa: E501
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this BalanceReport.

        The minimum balance registered for the report's date range  # noqa: E501

        :param minimum: The minimum of this BalanceReport.  # noqa: E501
        :type: float
        """
        if minimum is None:
            raise ValueError("Invalid value for `minimum`, must not be `None`")  # noqa: E501

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this BalanceReport.  # noqa: E501

        The maximum balance registered for the report's date range  # noqa: E501

        :return: The maximum of this BalanceReport.  # noqa: E501
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this BalanceReport.

        The maximum balance registered for the report's date range  # noqa: E501

        :param maximum: The maximum of this BalanceReport.  # noqa: E501
        :type: float
        """
        if maximum is None:
            raise ValueError("Invalid value for `maximum`, must not be `None`")  # noqa: E501

        self._maximum = maximum

    @property
    def average(self):
        """Gets the average of this BalanceReport.  # noqa: E501


        :return: The average of this BalanceReport.  # noqa: E501
        :rtype: BalanceReportAverage
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this BalanceReport.


        :param average: The average of this BalanceReport.  # noqa: E501
        :type: BalanceReportAverage
        """
        if average is None:
            raise ValueError("Invalid value for `average`, must not be `None`")  # noqa: E501

        self._average = average

    @property
    def forecasted_average(self):
        """Gets the forecasted_average of this BalanceReport.  # noqa: E501


        :return: The forecasted_average of this BalanceReport.  # noqa: E501
        :rtype: BalanceReportForecastedAverage
        """
        return self._forecasted_average

    @forecasted_average.setter
    def forecasted_average(self, forecasted_average):
        """Sets the forecasted_average of this BalanceReport.


        :param forecasted_average: The forecasted_average of this BalanceReport.  # noqa: E501
        :type: BalanceReportForecastedAverage
        """
        if forecasted_average is None:
            raise ValueError("Invalid value for `forecasted_average`, must not be `None`")  # noqa: E501

        self._forecasted_average = forecasted_average

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
