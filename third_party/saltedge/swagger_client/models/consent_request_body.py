# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsentRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scopes': 'list[str]',
        'from_date': 'date',
        'to_date': 'date',
        'period_days': 'int'
    }

    attribute_map = {
        'scopes': 'scopes',
        'from_date': 'from_date',
        'to_date': 'to_date',
        'period_days': 'period_days'
    }

    def __init__(self, scopes=None, from_date=None, to_date=None, period_days=None):  # noqa: E501
        """ConsentRequestBody - a model defined in Swagger"""  # noqa: E501
        self._scopes = None
        self._from_date = None
        self._to_date = None
        self._period_days = None
        self.discriminator = None
        self.scopes = scopes
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if period_days is not None:
            self.period_days = period_days

    @property
    def scopes(self):
        """Gets the scopes of this ConsentRequestBody.  # noqa: E501

        data to be allowed for fetching.  The allowed values for this parameter must fall within the client's `allowed_fetch_scopes` and/or provider's `supported_fetch_scopes` restrictions. To change the client's allowed scopes, please <a href='https://www.saltedge.com/pages/contact' target=\"_blank\">contact our Sales team</a>.   # noqa: E501

        :return: The scopes of this ConsentRequestBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ConsentRequestBody.

        data to be allowed for fetching.  The allowed values for this parameter must fall within the client's `allowed_fetch_scopes` and/or provider's `supported_fetch_scopes` restrictions. To change the client's allowed scopes, please <a href='https://www.saltedge.com/pages/contact' target=\"_blank\">contact our Sales team</a>.   # noqa: E501

        :param scopes: The scopes of this ConsentRequestBody.  # noqa: E501
        :type: list[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501
        allowed_values = ["account_details", "holder_information", "transactions_details"]  # noqa: E501
        if not set(scopes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scopes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(scopes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._scopes = scopes

    @property
    def from_date(self):
        """Gets the from_date of this ConsentRequestBody.  # noqa: E501

        date to be allowed for fetching the data from. Defaults to `90 days ago`. This parameter is used when `scopes` parameter contains `transactions_details`. The allowed values for this parameter must be within exactly 365 days ago.  # noqa: E501

        :return: The from_date of this ConsentRequestBody.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this ConsentRequestBody.

        date to be allowed for fetching the data from. Defaults to `90 days ago`. This parameter is used when `scopes` parameter contains `transactions_details`. The allowed values for this parameter must be within exactly 365 days ago.  # noqa: E501

        :param from_date: The from_date of this ConsentRequestBody.  # noqa: E501
        :type: date
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this ConsentRequestBody.  # noqa: E501

        date to be allowed for fetching the data until. The allowed values for this parameter must be equal or more than `from_date`.  # noqa: E501

        :return: The to_date of this ConsentRequestBody.  # noqa: E501
        :rtype: date
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this ConsentRequestBody.

        date to be allowed for fetching the data until. The allowed values for this parameter must be equal or more than `from_date`.  # noqa: E501

        :param to_date: The to_date of this ConsentRequestBody.  # noqa: E501
        :type: date
        """

        self._to_date = to_date

    @property
    def period_days(self):
        """Gets the period_days of this ConsentRequestBody.  # noqa: E501

        determines the period the consent will be valid for. Defaults to `null` (limitless) or provider's `max_consent_days`. The allowed value for this parameter must not be higher than the provider's `max_consent_days`.  # noqa: E501

        :return: The period_days of this ConsentRequestBody.  # noqa: E501
        :rtype: int
        """
        return self._period_days

    @period_days.setter
    def period_days(self, period_days):
        """Sets the period_days of this ConsentRequestBody.

        determines the period the consent will be valid for. Defaults to `null` (limitless) or provider's `max_consent_days`. The allowed value for this parameter must not be higher than the provider's `max_consent_days`.  # noqa: E501

        :param period_days: The period_days of this ConsentRequestBody.  # noqa: E501
        :type: int
        """

        self._period_days = period_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsentRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsentRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
