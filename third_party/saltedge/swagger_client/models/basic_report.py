# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasicReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'customer_id': 'str',
        'customer_identifier': 'str',
        'connection_ids': 'list[str]',
        'status': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'customer_id': 'customer_id',
        'customer_identifier': 'customer_identifier',
        'connection_ids': 'connection_ids',
        'status': 'status',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, customer_id=None, customer_identifier=None, connection_ids=None, status=None, created_at=None):  # noqa: E501
        """BasicReport - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._customer_id = None
        self._customer_identifier = None
        self._connection_ids = None
        self._status = None
        self._created_at = None
        self.discriminator = None
        self.id = id
        self.customer_id = customer_id
        self.customer_identifier = customer_identifier
        self.connection_ids = connection_ids
        self.status = status
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this BasicReport.  # noqa: E501

        the `id` of the general report generated based on the customer's data  # noqa: E501

        :return: The id of this BasicReport.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasicReport.

        the `id` of the general report generated based on the customer's data  # noqa: E501

        :param id: The id of this BasicReport.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def customer_id(self):
        """Gets the customer_id of this BasicReport.  # noqa: E501

        the `id` of the [customer](#customers) for which the report has been requested  # noqa: E501

        :return: The customer_id of this BasicReport.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this BasicReport.

        the `id` of the [customer](#customers) for which the report has been requested  # noqa: E501

        :param customer_id: The customer_id of this BasicReport.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def customer_identifier(self):
        """Gets the customer_identifier of this BasicReport.  # noqa: E501

        unique [customer](#customers) identifier  # noqa: E501

        :return: The customer_identifier of this BasicReport.  # noqa: E501
        :rtype: str
        """
        return self._customer_identifier

    @customer_identifier.setter
    def customer_identifier(self, customer_identifier):
        """Sets the customer_identifier of this BasicReport.

        unique [customer](#customers) identifier  # noqa: E501

        :param customer_identifier: The customer_identifier of this BasicReport.  # noqa: E501
        :type: str
        """
        if customer_identifier is None:
            raise ValueError("Invalid value for `customer_identifier`, must not be `None`")  # noqa: E501

        self._customer_identifier = customer_identifier

    @property
    def connection_ids(self):
        """Gets the connection_ids of this BasicReport.  # noqa: E501

        `ids` of [connections](#connections) included in the report  # noqa: E501

        :return: The connection_ids of this BasicReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._connection_ids

    @connection_ids.setter
    def connection_ids(self, connection_ids):
        """Sets the connection_ids of this BasicReport.

        `ids` of [connections](#connections) included in the report  # noqa: E501

        :param connection_ids: The connection_ids of this BasicReport.  # noqa: E501
        :type: list[str]
        """
        if connection_ids is None:
            raise ValueError("Invalid value for `connection_ids`, must not be `None`")  # noqa: E501

        self._connection_ids = connection_ids

    @property
    def status(self):
        """Gets the status of this BasicReport.  # noqa: E501

        current report's status.  # noqa: E501

        :return: The status of this BasicReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BasicReport.

        current report's status.  # noqa: E501

        :param status: The status of this BasicReport.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["initialized", "success", "failed", "calculating"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this BasicReport.  # noqa: E501

        the date when the report was created  # noqa: E501

        :return: The created_at of this BasicReport.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BasicReport.

        the date when the report was created  # noqa: E501

        :param created_at: The created_at of this BasicReport.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
