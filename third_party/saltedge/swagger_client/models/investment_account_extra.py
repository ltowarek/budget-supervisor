# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvestmentAccountExtra(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'investment_amount': 'float',
        'unit_price': 'float',
        'units': 'float',
        'indicative_unit_price': 'float',
        'interest_income': 'float',
        'interest_amount': 'float',
        'profit_amount': 'float',
        'profit_rate': 'float',
        'asset_class': 'str',
        'product_type': 'str',
        'total_unit_value': 'float',
        'fund_holdings': 'object'
    }

    attribute_map = {
        'investment_amount': 'investment_amount',
        'unit_price': 'unit_price',
        'units': 'units',
        'indicative_unit_price': 'indicative_unit_price',
        'interest_income': 'interest_income',
        'interest_amount': 'interest_amount',
        'profit_amount': 'profit_amount',
        'profit_rate': 'profit_rate',
        'asset_class': 'asset_class',
        'product_type': 'product_type',
        'total_unit_value': 'total_unit_value',
        'fund_holdings': 'fund_holdings'
    }

    def __init__(self, investment_amount=None, unit_price=None, units=None, indicative_unit_price=None, interest_income=None, interest_amount=None, profit_amount=None, profit_rate=None, asset_class=None, product_type=None, total_unit_value=None, fund_holdings=None):  # noqa: E501
        """InvestmentAccountExtra - a model defined in Swagger"""  # noqa: E501
        self._investment_amount = None
        self._unit_price = None
        self._units = None
        self._indicative_unit_price = None
        self._interest_income = None
        self._interest_amount = None
        self._profit_amount = None
        self._profit_rate = None
        self._asset_class = None
        self._product_type = None
        self._total_unit_value = None
        self._fund_holdings = None
        self.discriminator = None
        if investment_amount is not None:
            self.investment_amount = investment_amount
        if unit_price is not None:
            self.unit_price = unit_price
        if units is not None:
            self.units = units
        if indicative_unit_price is not None:
            self.indicative_unit_price = indicative_unit_price
        if interest_income is not None:
            self.interest_income = interest_income
        if interest_amount is not None:
            self.interest_amount = interest_amount
        if profit_amount is not None:
            self.profit_amount = profit_amount
        if profit_rate is not None:
            self.profit_rate = profit_rate
        if asset_class is not None:
            self.asset_class = asset_class
        if product_type is not None:
            self.product_type = product_type
        if total_unit_value is not None:
            self.total_unit_value = total_unit_value
        if fund_holdings is not None:
            self.fund_holdings = fund_holdings

    @property
    def investment_amount(self):
        """Gets the investment_amount of this InvestmentAccountExtra.  # noqa: E501

        total invested amount  # noqa: E501

        :return: The investment_amount of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._investment_amount

    @investment_amount.setter
    def investment_amount(self, investment_amount):
        """Sets the investment_amount of this InvestmentAccountExtra.

        total invested amount  # noqa: E501

        :param investment_amount: The investment_amount of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._investment_amount = investment_amount

    @property
    def unit_price(self):
        """Gets the unit_price of this InvestmentAccountExtra.  # noqa: E501

        price per unit (used with units)  # noqa: E501

        :return: The unit_price of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvestmentAccountExtra.

        price per unit (used with units)  # noqa: E501

        :param unit_price: The unit_price of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def units(self):
        """Gets the units of this InvestmentAccountExtra.  # noqa: E501

        amount of units owned (used with unit_price)  # noqa: E501

        :return: The units of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this InvestmentAccountExtra.

        amount of units owned (used with unit_price)  # noqa: E501

        :param units: The units of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._units = units

    @property
    def indicative_unit_price(self):
        """Gets the indicative_unit_price of this InvestmentAccountExtra.  # noqa: E501

        indicative price per unit (used with units)  # noqa: E501

        :return: The indicative_unit_price of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._indicative_unit_price

    @indicative_unit_price.setter
    def indicative_unit_price(self, indicative_unit_price):
        """Sets the indicative_unit_price of this InvestmentAccountExtra.

        indicative price per unit (used with units)  # noqa: E501

        :param indicative_unit_price: The indicative_unit_price of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._indicative_unit_price = indicative_unit_price

    @property
    def interest_income(self):
        """Gets the interest_income of this InvestmentAccountExtra.  # noqa: E501

        amount of interest income/profit  # noqa: E501

        :return: The interest_income of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._interest_income

    @interest_income.setter
    def interest_income(self, interest_income):
        """Sets the interest_income of this InvestmentAccountExtra.

        amount of interest income/profit  # noqa: E501

        :param interest_income: The interest_income of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._interest_income = interest_income

    @property
    def interest_amount(self):
        """Gets the interest_amount of this InvestmentAccountExtra.  # noqa: E501

        interest amount in currency  # noqa: E501

        :return: The interest_amount of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._interest_amount

    @interest_amount.setter
    def interest_amount(self, interest_amount):
        """Sets the interest_amount of this InvestmentAccountExtra.

        interest amount in currency  # noqa: E501

        :param interest_amount: The interest_amount of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._interest_amount = interest_amount

    @property
    def profit_amount(self):
        """Gets the profit_amount of this InvestmentAccountExtra.  # noqa: E501

        amount of profit/loss of investment account  # noqa: E501

        :return: The profit_amount of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._profit_amount

    @profit_amount.setter
    def profit_amount(self, profit_amount):
        """Sets the profit_amount of this InvestmentAccountExtra.

        amount of profit/loss of investment account  # noqa: E501

        :param profit_amount: The profit_amount of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._profit_amount = profit_amount

    @property
    def profit_rate(self):
        """Gets the profit_rate of this InvestmentAccountExtra.  # noqa: E501

        investment account rate of profit/loss as percentage value  # noqa: E501

        :return: The profit_rate of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._profit_rate

    @profit_rate.setter
    def profit_rate(self, profit_rate):
        """Sets the profit_rate of this InvestmentAccountExtra.

        investment account rate of profit/loss as percentage value  # noqa: E501

        :param profit_rate: The profit_rate of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._profit_rate = profit_rate

    @property
    def asset_class(self):
        """Gets the asset_class of this InvestmentAccountExtra.  # noqa: E501

        class of investment asset  # noqa: E501

        :return: The asset_class of this InvestmentAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this InvestmentAccountExtra.

        class of investment asset  # noqa: E501

        :param asset_class: The asset_class of this InvestmentAccountExtra.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def product_type(self):
        """Gets the product_type of this InvestmentAccountExtra.  # noqa: E501

        investment product type  # noqa: E501

        :return: The product_type of this InvestmentAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this InvestmentAccountExtra.

        investment product type  # noqa: E501

        :param product_type: The product_type of this InvestmentAccountExtra.  # noqa: E501
        :type: str
        """

        self._product_type = product_type

    @property
    def total_unit_value(self):
        """Gets the total_unit_value of this InvestmentAccountExtra.  # noqa: E501

        total units value of fund holding  # noqa: E501

        :return: The total_unit_value of this InvestmentAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._total_unit_value

    @total_unit_value.setter
    def total_unit_value(self, total_unit_value):
        """Sets the total_unit_value of this InvestmentAccountExtra.

        total units value of fund holding  # noqa: E501

        :param total_unit_value: The total_unit_value of this InvestmentAccountExtra.  # noqa: E501
        :type: float
        """

        self._total_unit_value = total_unit_value

    @property
    def fund_holdings(self):
        """Gets the fund_holdings of this InvestmentAccountExtra.  # noqa: E501

        fund holdings list with own values such as (`investment_percentage`, `balance`, `bid_price`, `value`, `value_date`, `total_quantity`, `available_quantity`, `actual_price`, `actual_value`)\"  # noqa: E501

        :return: The fund_holdings of this InvestmentAccountExtra.  # noqa: E501
        :rtype: object
        """
        return self._fund_holdings

    @fund_holdings.setter
    def fund_holdings(self, fund_holdings):
        """Sets the fund_holdings of this InvestmentAccountExtra.

        fund holdings list with own values such as (`investment_percentage`, `balance`, `bid_price`, `value`, `value_date`, `total_quantity`, `available_quantity`, `actual_price`, `actual_value`)\"  # noqa: E501

        :param fund_holdings: The fund_holdings of this InvestmentAccountExtra.  # noqa: E501
        :type: object
        """

        self._fund_holdings = fund_holdings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentAccountExtra, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentAccountExtra):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
