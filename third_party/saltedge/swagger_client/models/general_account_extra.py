# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneralAccountExtra(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'account_number': 'str',
        'assets': 'list[str]',
        'available_amount': 'float',
        'balance_type': 'str',
        'blocked_amount': 'float',
        'card_type': 'str',
        'cards': 'list[str]',
        'client_name': 'str',
        'closing_balance': 'float',
        'credit_limit': 'float',
        'current_date': 'date',
        'current_time': 'datetime',
        'expiry_date': 'date',
        'iban': 'str',
        'interest_rate': 'float',
        'next_payment_amount': 'float',
        'next_payment_date': 'date',
        'open_date': 'date',
        'opening_balance': 'float',
        'partial': 'bool',
        'sort_code': 'str',
        'statement_cut_date': 'date',
        'status': 'str',
        'swift': 'str',
        'total_payment_amount': 'float',
        'transactions_count': 'GeneralAccountExtraTransactionsCount',
        'payment_type': 'str',
        'cashback_amount': 'float',
        'monthly_total_payment': 'float',
        'minimum_payment': 'float'
    }

    attribute_map = {
        'account_name': 'account_name',
        'account_number': 'account_number',
        'assets': 'assets',
        'available_amount': 'available_amount',
        'balance_type': 'balance_type',
        'blocked_amount': 'blocked_amount',
        'card_type': 'card_type',
        'cards': 'cards',
        'client_name': 'client_name',
        'closing_balance': 'closing_balance',
        'credit_limit': 'credit_limit',
        'current_date': 'current_date',
        'current_time': 'current_time',
        'expiry_date': 'expiry_date',
        'iban': 'iban',
        'interest_rate': 'interest_rate',
        'next_payment_amount': 'next_payment_amount',
        'next_payment_date': 'next_payment_date',
        'open_date': 'open_date',
        'opening_balance': 'opening_balance',
        'partial': 'partial',
        'sort_code': 'sort_code',
        'statement_cut_date': 'statement_cut_date',
        'status': 'status',
        'swift': 'swift',
        'total_payment_amount': 'total_payment_amount',
        'transactions_count': 'transactions_count',
        'payment_type': 'payment_type',
        'cashback_amount': 'cashback_amount',
        'monthly_total_payment': 'monthly_total_payment',
        'minimum_payment': 'minimum_payment'
    }

    def __init__(self, account_name=None, account_number=None, assets=None, available_amount=None, balance_type=None, blocked_amount=None, card_type=None, cards=None, client_name=None, closing_balance=None, credit_limit=None, current_date=None, current_time=None, expiry_date=None, iban=None, interest_rate=None, next_payment_amount=None, next_payment_date=None, open_date=None, opening_balance=None, partial=None, sort_code=None, statement_cut_date=None, status=None, swift=None, total_payment_amount=None, transactions_count=None, payment_type=None, cashback_amount=None, monthly_total_payment=None, minimum_payment=None):  # noqa: E501
        """GeneralAccountExtra - a model defined in Swagger"""  # noqa: E501
        self._account_name = None
        self._account_number = None
        self._assets = None
        self._available_amount = None
        self._balance_type = None
        self._blocked_amount = None
        self._card_type = None
        self._cards = None
        self._client_name = None
        self._closing_balance = None
        self._credit_limit = None
        self._current_date = None
        self._current_time = None
        self._expiry_date = None
        self._iban = None
        self._interest_rate = None
        self._next_payment_amount = None
        self._next_payment_date = None
        self._open_date = None
        self._opening_balance = None
        self._partial = None
        self._sort_code = None
        self._statement_cut_date = None
        self._status = None
        self._swift = None
        self._total_payment_amount = None
        self._transactions_count = None
        self._payment_type = None
        self._cashback_amount = None
        self._monthly_total_payment = None
        self._minimum_payment = None
        self.discriminator = None
        if account_name is not None:
            self.account_name = account_name
        if account_number is not None:
            self.account_number = account_number
        if assets is not None:
            self.assets = assets
        if available_amount is not None:
            self.available_amount = available_amount
        if balance_type is not None:
            self.balance_type = balance_type
        if blocked_amount is not None:
            self.blocked_amount = blocked_amount
        if card_type is not None:
            self.card_type = card_type
        if cards is not None:
            self.cards = cards
        if client_name is not None:
            self.client_name = client_name
        if closing_balance is not None:
            self.closing_balance = closing_balance
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if current_date is not None:
            self.current_date = current_date
        if current_time is not None:
            self.current_time = current_time
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if iban is not None:
            self.iban = iban
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if next_payment_amount is not None:
            self.next_payment_amount = next_payment_amount
        if next_payment_date is not None:
            self.next_payment_date = next_payment_date
        if open_date is not None:
            self.open_date = open_date
        if opening_balance is not None:
            self.opening_balance = opening_balance
        if partial is not None:
            self.partial = partial
        if sort_code is not None:
            self.sort_code = sort_code
        if statement_cut_date is not None:
            self.statement_cut_date = statement_cut_date
        if status is not None:
            self.status = status
        if swift is not None:
            self.swift = swift
        if total_payment_amount is not None:
            self.total_payment_amount = total_payment_amount
        if transactions_count is not None:
            self.transactions_count = transactions_count
        if payment_type is not None:
            self.payment_type = payment_type
        if cashback_amount is not None:
            self.cashback_amount = cashback_amount
        if monthly_total_payment is not None:
            self.monthly_total_payment = monthly_total_payment
        if minimum_payment is not None:
            self.minimum_payment = minimum_payment

    @property
    def account_name(self):
        """Gets the account_name of this GeneralAccountExtra.  # noqa: E501

        changeable name of the account  # noqa: E501

        :return: The account_name of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this GeneralAccountExtra.

        changeable name of the account  # noqa: E501

        :param account_name: The account_name of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this GeneralAccountExtra.  # noqa: E501

        internal bank account number  # noqa: E501

        :return: The account_number of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GeneralAccountExtra.

        internal bank account number  # noqa: E501

        :param account_number: The account_number of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def assets(self):
        """Gets the assets of this GeneralAccountExtra.  # noqa: E501

        array of crypto codes and their amounts assigned to investment account  # noqa: E501

        :return: The assets of this GeneralAccountExtra.  # noqa: E501
        :rtype: list[str]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this GeneralAccountExtra.

        array of crypto codes and their amounts assigned to investment account  # noqa: E501

        :param assets: The assets of this GeneralAccountExtra.  # noqa: E501
        :type: list[str]
        """

        self._assets = assets

    @property
    def available_amount(self):
        """Gets the available_amount of this GeneralAccountExtra.  # noqa: E501

        available amount in the account's currency  # noqa: E501

        :return: The available_amount of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._available_amount

    @available_amount.setter
    def available_amount(self, available_amount):
        """Sets the available_amount of this GeneralAccountExtra.

        available amount in the account's currency  # noqa: E501

        :param available_amount: The available_amount of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._available_amount = available_amount

    @property
    def balance_type(self):
        """Gets the balance_type of this GeneralAccountExtra.  # noqa: E501

        type of the imported balance as showed/returned by the bank  # noqa: E501

        :return: The balance_type of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type):
        """Sets the balance_type of this GeneralAccountExtra.

        type of the imported balance as showed/returned by the bank  # noqa: E501

        :param balance_type: The balance_type of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._balance_type = balance_type

    @property
    def blocked_amount(self):
        """Gets the blocked_amount of this GeneralAccountExtra.  # noqa: E501

        the amount currently blocked in account's currency  # noqa: E501

        :return: The blocked_amount of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._blocked_amount

    @blocked_amount.setter
    def blocked_amount(self, blocked_amount):
        """Sets the blocked_amount of this GeneralAccountExtra.

        the amount currently blocked in account's currency  # noqa: E501

        :param blocked_amount: The blocked_amount of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._blocked_amount = blocked_amount

    @property
    def card_type(self):
        """Gets the card_type of this GeneralAccountExtra.  # noqa: E501

        type of the `card` account.  # noqa: E501

        :return: The card_type of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this GeneralAccountExtra.

        type of the `card` account.  # noqa: E501

        :param card_type: The card_type of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """
        allowed_values = ["american_express", "china_unionpay", "diners_club", "jcb", "maestro", "master_card", "uatp", "visa", "mir"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def cards(self):
        """Gets the cards of this GeneralAccountExtra.  # noqa: E501

        list of masked card numbers linked to the account  # noqa: E501

        :return: The cards of this GeneralAccountExtra.  # noqa: E501
        :rtype: list[str]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this GeneralAccountExtra.

        list of masked card numbers linked to the account  # noqa: E501

        :param cards: The cards of this GeneralAccountExtra.  # noqa: E501
        :type: list[str]
        """

        self._cards = cards

    @property
    def client_name(self):
        """Gets the client_name of this GeneralAccountExtra.  # noqa: E501

        account client owner  # noqa: E501

        :return: The client_name of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this GeneralAccountExtra.

        account client owner  # noqa: E501

        :param client_name: The client_name of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def closing_balance(self):
        """Gets the closing_balance of this GeneralAccountExtra.  # noqa: E501

        account balance at the end of an accounting period  # noqa: E501

        :return: The closing_balance of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._closing_balance

    @closing_balance.setter
    def closing_balance(self, closing_balance):
        """Sets the closing_balance of this GeneralAccountExtra.

        account balance at the end of an accounting period  # noqa: E501

        :param closing_balance: The closing_balance of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._closing_balance = closing_balance

    @property
    def credit_limit(self):
        """Gets the credit_limit of this GeneralAccountExtra.  # noqa: E501

        maximum amount of money that is allowed to be spent in account's currency  # noqa: E501

        :return: The credit_limit of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this GeneralAccountExtra.

        maximum amount of money that is allowed to be spent in account's currency  # noqa: E501

        :param credit_limit: The credit_limit of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def current_date(self):
        """Gets the current_date of this GeneralAccountExtra.  # noqa: E501

        date of provider statement generation (applicable to banks)  # noqa: E501

        :return: The current_date of this GeneralAccountExtra.  # noqa: E501
        :rtype: date
        """
        return self._current_date

    @current_date.setter
    def current_date(self, current_date):
        """Sets the current_date of this GeneralAccountExtra.

        date of provider statement generation (applicable to banks)  # noqa: E501

        :param current_date: The current_date of this GeneralAccountExtra.  # noqa: E501
        :type: date
        """

        self._current_date = current_date

    @property
    def current_time(self):
        """Gets the current_time of this GeneralAccountExtra.  # noqa: E501

        time of provider statement generation (applicable to banks)  # noqa: E501

        :return: The current_time of this GeneralAccountExtra.  # noqa: E501
        :rtype: datetime
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this GeneralAccountExtra.

        time of provider statement generation (applicable to banks)  # noqa: E501

        :param current_time: The current_time of this GeneralAccountExtra.  # noqa: E501
        :type: datetime
        """

        self._current_time = current_time

    @property
    def expiry_date(self):
        """Gets the expiry_date of this GeneralAccountExtra.  # noqa: E501

        card expiry date  # noqa: E501

        :return: The expiry_date of this GeneralAccountExtra.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this GeneralAccountExtra.

        card expiry date  # noqa: E501

        :param expiry_date: The expiry_date of this GeneralAccountExtra.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def iban(self):
        """Gets the iban of this GeneralAccountExtra.  # noqa: E501

        account's IBAN  # noqa: E501

        :return: The iban of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this GeneralAccountExtra.

        account's IBAN  # noqa: E501

        :param iban: The iban of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def interest_rate(self):
        """Gets the interest_rate of this GeneralAccountExtra.  # noqa: E501

        interest rate of the account as percentage value  # noqa: E501

        :return: The interest_rate of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this GeneralAccountExtra.

        interest rate of the account as percentage value  # noqa: E501

        :param interest_rate: The interest_rate of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def next_payment_amount(self):
        """Gets the next_payment_amount of this GeneralAccountExtra.  # noqa: E501

        next payment amount for loans or credits  # noqa: E501

        :return: The next_payment_amount of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._next_payment_amount

    @next_payment_amount.setter
    def next_payment_amount(self, next_payment_amount):
        """Sets the next_payment_amount of this GeneralAccountExtra.

        next payment amount for loans or credits  # noqa: E501

        :param next_payment_amount: The next_payment_amount of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._next_payment_amount = next_payment_amount

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this GeneralAccountExtra.  # noqa: E501

        next payment date for loans or credits  # noqa: E501

        :return: The next_payment_date of this GeneralAccountExtra.  # noqa: E501
        :rtype: date
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this GeneralAccountExtra.

        next payment date for loans or credits  # noqa: E501

        :param next_payment_date: The next_payment_date of this GeneralAccountExtra.  # noqa: E501
        :type: date
        """

        self._next_payment_date = next_payment_date

    @property
    def open_date(self):
        """Gets the open_date of this GeneralAccountExtra.  # noqa: E501

        the date when any type of account/card was opened  # noqa: E501

        :return: The open_date of this GeneralAccountExtra.  # noqa: E501
        :rtype: date
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this GeneralAccountExtra.

        the date when any type of account/card was opened  # noqa: E501

        :param open_date: The open_date of this GeneralAccountExtra.  # noqa: E501
        :type: date
        """

        self._open_date = open_date

    @property
    def opening_balance(self):
        """Gets the opening_balance of this GeneralAccountExtra.  # noqa: E501

        account balance that is brought forward from the end of one accounting period to the beginning of a new accounting period  # noqa: E501

        :return: The opening_balance of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._opening_balance

    @opening_balance.setter
    def opening_balance(self, opening_balance):
        """Sets the opening_balance of this GeneralAccountExtra.

        account balance that is brought forward from the end of one accounting period to the beginning of a new accounting period  # noqa: E501

        :param opening_balance: The opening_balance of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._opening_balance = opening_balance

    @property
    def partial(self):
        """Gets the partial of this GeneralAccountExtra.  # noqa: E501

        account transactions were not imported or imported partially because of some internal error on the provider's side  # noqa: E501

        :return: The partial of this GeneralAccountExtra.  # noqa: E501
        :rtype: bool
        """
        return self._partial

    @partial.setter
    def partial(self, partial):
        """Sets the partial of this GeneralAccountExtra.

        account transactions were not imported or imported partially because of some internal error on the provider's side  # noqa: E501

        :param partial: The partial of this GeneralAccountExtra.  # noqa: E501
        :type: bool
        """

        self._partial = partial

    @property
    def sort_code(self):
        """Gets the sort_code of this GeneralAccountExtra.  # noqa: E501

        routing number(US)/BSB code(Australia)/sort code(UK)  # noqa: E501

        :return: The sort_code of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this GeneralAccountExtra.

        routing number(US)/BSB code(Australia)/sort code(UK)  # noqa: E501

        :param sort_code: The sort_code of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._sort_code = sort_code

    @property
    def statement_cut_date(self):
        """Gets the statement_cut_date of this GeneralAccountExtra.  # noqa: E501

        date when current statement becomes previous one  # noqa: E501

        :return: The statement_cut_date of this GeneralAccountExtra.  # noqa: E501
        :rtype: date
        """
        return self._statement_cut_date

    @statement_cut_date.setter
    def statement_cut_date(self, statement_cut_date):
        """Sets the statement_cut_date of this GeneralAccountExtra.

        date when current statement becomes previous one  # noqa: E501

        :param statement_cut_date: The statement_cut_date of this GeneralAccountExtra.  # noqa: E501
        :type: date
        """

        self._statement_cut_date = statement_cut_date

    @property
    def status(self):
        """Gets the status of this GeneralAccountExtra.  # noqa: E501

        shows whether the account is `active` or `inactive`  # noqa: E501

        :return: The status of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GeneralAccountExtra.

        shows whether the account is `active` or `inactive`  # noqa: E501

        :param status: The status of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def swift(self):
        """Gets the swift of this GeneralAccountExtra.  # noqa: E501

        account SWIFT code  # noqa: E501

        :return: The swift of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this GeneralAccountExtra.

        account SWIFT code  # noqa: E501

        :param swift: The swift of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._swift = swift

    @property
    def total_payment_amount(self):
        """Gets the total_payment_amount of this GeneralAccountExtra.  # noqa: E501

        total payment amount for loans or credits  # noqa: E501

        :return: The total_payment_amount of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._total_payment_amount

    @total_payment_amount.setter
    def total_payment_amount(self, total_payment_amount):
        """Sets the total_payment_amount of this GeneralAccountExtra.

        total payment amount for loans or credits  # noqa: E501

        :param total_payment_amount: The total_payment_amount of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._total_payment_amount = total_payment_amount

    @property
    def transactions_count(self):
        """Gets the transactions_count of this GeneralAccountExtra.  # noqa: E501


        :return: The transactions_count of this GeneralAccountExtra.  # noqa: E501
        :rtype: GeneralAccountExtraTransactionsCount
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this GeneralAccountExtra.


        :param transactions_count: The transactions_count of this GeneralAccountExtra.  # noqa: E501
        :type: GeneralAccountExtraTransactionsCount
        """

        self._transactions_count = transactions_count

    @property
    def payment_type(self):
        """Gets the payment_type of this GeneralAccountExtra.  # noqa: E501

        account payment method  # noqa: E501

        :return: The payment_type of this GeneralAccountExtra.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this GeneralAccountExtra.

        account payment method  # noqa: E501

        :param payment_type: The payment_type of this GeneralAccountExtra.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def cashback_amount(self):
        """Gets the cashback_amount of this GeneralAccountExtra.  # noqa: E501

        accumulated CashBack / Cash Benefit  # noqa: E501

        :return: The cashback_amount of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._cashback_amount

    @cashback_amount.setter
    def cashback_amount(self, cashback_amount):
        """Sets the cashback_amount of this GeneralAccountExtra.

        accumulated CashBack / Cash Benefit  # noqa: E501

        :param cashback_amount: The cashback_amount of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._cashback_amount = cashback_amount

    @property
    def monthly_total_payment(self):
        """Gets the monthly_total_payment of this GeneralAccountExtra.  # noqa: E501

        the amount a borrower was paid for a month  # noqa: E501

        :return: The monthly_total_payment of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._monthly_total_payment

    @monthly_total_payment.setter
    def monthly_total_payment(self, monthly_total_payment):
        """Sets the monthly_total_payment of this GeneralAccountExtra.

        the amount a borrower was paid for a month  # noqa: E501

        :param monthly_total_payment: The monthly_total_payment of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._monthly_total_payment = monthly_total_payment

    @property
    def minimum_payment(self):
        """Gets the minimum_payment of this GeneralAccountExtra.  # noqa: E501

        the lowest amount you can pay on your credit card to avoid penalties  # noqa: E501

        :return: The minimum_payment of this GeneralAccountExtra.  # noqa: E501
        :rtype: float
        """
        return self._minimum_payment

    @minimum_payment.setter
    def minimum_payment(self, minimum_payment):
        """Sets the minimum_payment of this GeneralAccountExtra.

        the lowest amount you can pay on your credit card to avoid penalties  # noqa: E501

        :param minimum_payment: The minimum_payment of this GeneralAccountExtra.  # noqa: E501
        :type: float
        """

        self._minimum_payment = minimum_payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralAccountExtra, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralAccountExtra):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
