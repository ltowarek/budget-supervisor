# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CategoriesRequestBodyDataTransactions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'category_code': 'str',
        'immediate': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'category_code': 'category_code',
        'immediate': 'immediate'
    }

    def __init__(self, id=None, category_code=None, immediate=None):  # noqa: E501
        """CategoriesRequestBodyDataTransactions - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._category_code = None
        self._immediate = None
        self.discriminator = None
        self.id = id
        self.category_code = category_code
        if immediate is not None:
            self.immediate = immediate

    @property
    def id(self):
        """Gets the id of this CategoriesRequestBodyDataTransactions.  # noqa: E501

        the `id` of the transaction  # noqa: E501

        :return: The id of this CategoriesRequestBodyDataTransactions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoriesRequestBodyDataTransactions.

        the `id` of the transaction  # noqa: E501

        :param id: The id of this CategoriesRequestBodyDataTransactions.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def category_code(self):
        """Gets the category_code of this CategoriesRequestBodyDataTransactions.  # noqa: E501

        the new category code of the transaction  # noqa: E501

        :return: The category_code of this CategoriesRequestBodyDataTransactions.  # noqa: E501
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this CategoriesRequestBodyDataTransactions.

        the new category code of the transaction  # noqa: E501

        :param category_code: The category_code of this CategoriesRequestBodyDataTransactions.  # noqa: E501
        :type: str
        """
        if category_code is None:
            raise ValueError("Invalid value for `category_code`, must not be `None`")  # noqa: E501

        self._category_code = category_code

    @property
    def immediate(self):
        """Gets the immediate of this CategoriesRequestBodyDataTransactions.  # noqa: E501

        If sent as `false`, the learning threshold of the categorizer will be applied - the categorizer will store information about the user's custom category for the transaction with this description. In case the categorizer identifies that the category has been updated 3 times for the transaction with this description, further transactions with this description will be automatically categorized for this user under this category.  If sent as `true`, the learning threshold of the categorizer will be ignored and further transactions with the same description will be classified under the category chosen by the user.   # noqa: E501

        :return: The immediate of this CategoriesRequestBodyDataTransactions.  # noqa: E501
        :rtype: bool
        """
        return self._immediate

    @immediate.setter
    def immediate(self, immediate):
        """Sets the immediate of this CategoriesRequestBodyDataTransactions.

        If sent as `false`, the learning threshold of the categorizer will be applied - the categorizer will store information about the user's custom category for the transaction with this description. In case the categorizer identifies that the category has been updated 3 times for the transaction with this description, further transactions with this description will be automatically categorized for this user under this category.  If sent as `true`, the learning threshold of the categorizer will be ignored and further transactions with the same description will be classified under the category chosen by the user.   # noqa: E501

        :param immediate: The immediate of this CategoriesRequestBodyDataTransactions.  # noqa: E501
        :type: bool
        """

        self._immediate = immediate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoriesRequestBodyDataTransactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoriesRequestBodyDataTransactions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
