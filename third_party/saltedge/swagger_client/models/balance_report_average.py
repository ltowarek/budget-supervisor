# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalanceReportAverage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'daily': 'BalanceReportAverageDaily',
        'monthly': 'BalanceReportAverageMonthly',
        'quarterly': 'BalanceReportAverageQuarterly',
        'annual': 'BalanceReportAverageAnnual',
        'minimum_monthly': 'BalanceReportAverageMinimumMonthly',
        'maximum_monthly': 'BalanceReportAverageMaximumMonthly'
    }

    attribute_map = {
        'daily': 'daily',
        'monthly': 'monthly',
        'quarterly': 'quarterly',
        'annual': 'annual',
        'minimum_monthly': 'minimum_monthly',
        'maximum_monthly': 'maximum_monthly'
    }

    def __init__(self, daily=None, monthly=None, quarterly=None, annual=None, minimum_monthly=None, maximum_monthly=None):  # noqa: E501
        """BalanceReportAverage - a model defined in Swagger"""  # noqa: E501
        self._daily = None
        self._monthly = None
        self._quarterly = None
        self._annual = None
        self._minimum_monthly = None
        self._maximum_monthly = None
        self.discriminator = None
        self.daily = daily
        self.monthly = monthly
        self.quarterly = quarterly
        self.annual = annual
        self.minimum_monthly = minimum_monthly
        self.maximum_monthly = maximum_monthly

    @property
    def daily(self):
        """Gets the daily of this BalanceReportAverage.  # noqa: E501


        :return: The daily of this BalanceReportAverage.  # noqa: E501
        :rtype: BalanceReportAverageDaily
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this BalanceReportAverage.


        :param daily: The daily of this BalanceReportAverage.  # noqa: E501
        :type: BalanceReportAverageDaily
        """
        if daily is None:
            raise ValueError("Invalid value for `daily`, must not be `None`")  # noqa: E501

        self._daily = daily

    @property
    def monthly(self):
        """Gets the monthly of this BalanceReportAverage.  # noqa: E501


        :return: The monthly of this BalanceReportAverage.  # noqa: E501
        :rtype: BalanceReportAverageMonthly
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this BalanceReportAverage.


        :param monthly: The monthly of this BalanceReportAverage.  # noqa: E501
        :type: BalanceReportAverageMonthly
        """
        if monthly is None:
            raise ValueError("Invalid value for `monthly`, must not be `None`")  # noqa: E501

        self._monthly = monthly

    @property
    def quarterly(self):
        """Gets the quarterly of this BalanceReportAverage.  # noqa: E501


        :return: The quarterly of this BalanceReportAverage.  # noqa: E501
        :rtype: BalanceReportAverageQuarterly
        """
        return self._quarterly

    @quarterly.setter
    def quarterly(self, quarterly):
        """Sets the quarterly of this BalanceReportAverage.


        :param quarterly: The quarterly of this BalanceReportAverage.  # noqa: E501
        :type: BalanceReportAverageQuarterly
        """
        if quarterly is None:
            raise ValueError("Invalid value for `quarterly`, must not be `None`")  # noqa: E501

        self._quarterly = quarterly

    @property
    def annual(self):
        """Gets the annual of this BalanceReportAverage.  # noqa: E501


        :return: The annual of this BalanceReportAverage.  # noqa: E501
        :rtype: BalanceReportAverageAnnual
        """
        return self._annual

    @annual.setter
    def annual(self, annual):
        """Sets the annual of this BalanceReportAverage.


        :param annual: The annual of this BalanceReportAverage.  # noqa: E501
        :type: BalanceReportAverageAnnual
        """
        if annual is None:
            raise ValueError("Invalid value for `annual`, must not be `None`")  # noqa: E501

        self._annual = annual

    @property
    def minimum_monthly(self):
        """Gets the minimum_monthly of this BalanceReportAverage.  # noqa: E501


        :return: The minimum_monthly of this BalanceReportAverage.  # noqa: E501
        :rtype: BalanceReportAverageMinimumMonthly
        """
        return self._minimum_monthly

    @minimum_monthly.setter
    def minimum_monthly(self, minimum_monthly):
        """Sets the minimum_monthly of this BalanceReportAverage.


        :param minimum_monthly: The minimum_monthly of this BalanceReportAverage.  # noqa: E501
        :type: BalanceReportAverageMinimumMonthly
        """
        if minimum_monthly is None:
            raise ValueError("Invalid value for `minimum_monthly`, must not be `None`")  # noqa: E501

        self._minimum_monthly = minimum_monthly

    @property
    def maximum_monthly(self):
        """Gets the maximum_monthly of this BalanceReportAverage.  # noqa: E501


        :return: The maximum_monthly of this BalanceReportAverage.  # noqa: E501
        :rtype: BalanceReportAverageMaximumMonthly
        """
        return self._maximum_monthly

    @maximum_monthly.setter
    def maximum_monthly(self, maximum_monthly):
        """Sets the maximum_monthly of this BalanceReportAverage.


        :param maximum_monthly: The maximum_monthly of this BalanceReportAverage.  # noqa: E501
        :type: BalanceReportAverageMaximumMonthly
        """
        if maximum_monthly is None:
            raise ValueError("Invalid value for `maximum_monthly`, must not be `None`")  # noqa: E501

        self._maximum_monthly = maximum_monthly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceReportAverage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceReportAverage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
