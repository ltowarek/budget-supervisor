# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Country(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'code': 'str',
        'refresh_start_time': 'int'
    }

    attribute_map = {
        'name': 'name',
        'code': 'code',
        'refresh_start_time': 'refresh_start_time'
    }

    def __init__(self, name=None, code=None, refresh_start_time=None):  # noqa: E501
        """Country - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._code = None
        self._refresh_start_time = None
        self.discriminator = None
        self.name = name
        self.code = code
        self.refresh_start_time = refresh_start_time

    @property
    def name(self):
        """Gets the name of this Country.  # noqa: E501

        Name of the country.  # noqa: E501

        :return: The name of this Country.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Country.

        Name of the country.  # noqa: E501

        :param name: The name of this Country.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this Country.  # noqa: E501

        Country code as dated in ISO 3166-1 alpha-2  # noqa: E501

        :return: The code of this Country.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Country.

        Country code as dated in ISO 3166-1 alpha-2  # noqa: E501

        :param code: The code of this Country.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def refresh_start_time(self):
        """Gets the refresh_start_time of this Country.  # noqa: E501

        Local country time when connections will be automatically refreshed.  # noqa: E501

        :return: The refresh_start_time of this Country.  # noqa: E501
        :rtype: int
        """
        return self._refresh_start_time

    @refresh_start_time.setter
    def refresh_start_time(self, refresh_start_time):
        """Sets the refresh_start_time of this Country.

        Local country time when connections will be automatically refreshed.  # noqa: E501

        :param refresh_start_time: The refresh_start_time of this Country.  # noqa: E501
        :type: int
        """
        if refresh_start_time is None:
            raise ValueError("Invalid value for `refresh_start_time`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]  # noqa: E501
        if refresh_start_time not in allowed_values:
            raise ValueError(
                "Invalid value for `refresh_start_time` ({0}), must be one of {1}"  # noqa: E501
                .format(refresh_start_time, allowed_values)
            )

        self._refresh_start_time = refresh_start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Country, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Country):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
