# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OauthAuthorizeRequestBodyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_string': 'str',
        'connection_id': 'str'
    }

    attribute_map = {
        'query_string': 'query_string',
        'connection_id': 'connection_id'
    }

    def __init__(self, query_string=None, connection_id=None):  # noqa: E501
        """OauthAuthorizeRequestBodyData - a model defined in Swagger"""  # noqa: E501
        self._query_string = None
        self._connection_id = None
        self.discriminator = None
        self.query_string = query_string
        self.connection_id = connection_id

    @property
    def query_string(self):
        """Gets the query_string of this OauthAuthorizeRequestBodyData.  # noqa: E501

        all the parameters appended to your `return_to` URL upon being redirected from the bank back to your application  # noqa: E501

        :return: The query_string of this OauthAuthorizeRequestBodyData.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this OauthAuthorizeRequestBodyData.

        all the parameters appended to your `return_to` URL upon being redirected from the bank back to your application  # noqa: E501

        :param query_string: The query_string of this OauthAuthorizeRequestBodyData.  # noqa: E501
        :type: str
        """
        if query_string is None:
            raise ValueError("Invalid value for `query_string`, must not be `None`")  # noqa: E501

        self._query_string = query_string

    @property
    def connection_id(self):
        """Gets the connection_id of this OauthAuthorizeRequestBodyData.  # noqa: E501

        the `id` of the connection that is being authorized  # noqa: E501

        :return: The connection_id of this OauthAuthorizeRequestBodyData.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this OauthAuthorizeRequestBodyData.

        the `id` of the connection that is being authorized  # noqa: E501

        :param connection_id: The connection_id of this OauthAuthorizeRequestBodyData.  # noqa: E501
        :type: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthAuthorizeRequestBodyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthAuthorizeRequestBodyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
