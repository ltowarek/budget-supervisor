# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OauthAuthorizedResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'created_at': 'datetime',
        'customer_id': 'str',
        'daily_refresh': 'bool',
        'id': 'str',
        'show_consent_confirmation': 'bool',
        'last_consent_id': 'str',
        'last_attempt': 'SimplifiedAttempt',
        'last_success_at': 'datetime',
        'next_refresh_possible_at': 'datetime',
        'provider_id': 'str',
        'provider_code': 'str',
        'provider_name': 'str',
        'status': 'str',
        'store_credentials': 'bool',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'country_code': 'country_code',
        'created_at': 'created_at',
        'customer_id': 'customer_id',
        'daily_refresh': 'daily_refresh',
        'id': 'id',
        'show_consent_confirmation': 'show_consent_confirmation',
        'last_consent_id': 'last_consent_id',
        'last_attempt': 'last_attempt',
        'last_success_at': 'last_success_at',
        'next_refresh_possible_at': 'next_refresh_possible_at',
        'provider_id': 'provider_id',
        'provider_code': 'provider_code',
        'provider_name': 'provider_name',
        'status': 'status',
        'store_credentials': 'store_credentials',
        'updated_at': 'updated_at'
    }

    def __init__(self, country_code=None, created_at=None, customer_id=None, daily_refresh=None, id=None, show_consent_confirmation=None, last_consent_id=None, last_attempt=None, last_success_at=None, next_refresh_possible_at=None, provider_id=None, provider_code=None, provider_name=None, status=None, store_credentials=None, updated_at=None):  # noqa: E501
        """OauthAuthorizedResponseData - a model defined in Swagger"""  # noqa: E501
        self._country_code = None
        self._created_at = None
        self._customer_id = None
        self._daily_refresh = None
        self._id = None
        self._show_consent_confirmation = None
        self._last_consent_id = None
        self._last_attempt = None
        self._last_success_at = None
        self._next_refresh_possible_at = None
        self._provider_id = None
        self._provider_code = None
        self._provider_name = None
        self._status = None
        self._store_credentials = None
        self._updated_at = None
        self.discriminator = None
        self.country_code = country_code
        self.created_at = created_at
        self.customer_id = customer_id
        self.daily_refresh = daily_refresh
        self.id = id
        self.show_consent_confirmation = show_consent_confirmation
        self.last_consent_id = last_consent_id
        self.last_attempt = last_attempt
        self.last_success_at = last_success_at
        self.next_refresh_possible_at = next_refresh_possible_at
        self.provider_id = provider_id
        self.provider_code = provider_code
        self.provider_name = provider_name
        self.status = status
        self.store_credentials = store_credentials
        self.updated_at = updated_at

    @property
    def country_code(self):
        """Gets the country_code of this OauthAuthorizedResponseData.  # noqa: E501

        code of the country the provider belongs to  # noqa: E501

        :return: The country_code of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OauthAuthorizedResponseData.

        code of the country the provider belongs to  # noqa: E501

        :param country_code: The country_code of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def created_at(self):
        """Gets the created_at of this OauthAuthorizedResponseData.  # noqa: E501

        time and date when the connection was added  # noqa: E501

        :return: The created_at of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OauthAuthorizedResponseData.

        time and date when the connection was added  # noqa: E501

        :param created_at: The created_at of this OauthAuthorizedResponseData.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this OauthAuthorizedResponseData.  # noqa: E501

        customer's `id`  # noqa: E501

        :return: The customer_id of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this OauthAuthorizedResponseData.

        customer's `id`  # noqa: E501

        :param customer_id: The customer_id of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def daily_refresh(self):
        """Gets the daily_refresh of this OauthAuthorizedResponseData.  # noqa: E501

        whether the connection will be refreshed daily  # noqa: E501

        :return: The daily_refresh of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._daily_refresh

    @daily_refresh.setter
    def daily_refresh(self, daily_refresh):
        """Sets the daily_refresh of this OauthAuthorizedResponseData.

        whether the connection will be refreshed daily  # noqa: E501

        :param daily_refresh: The daily_refresh of this OauthAuthorizedResponseData.  # noqa: E501
        :type: bool
        """
        if daily_refresh is None:
            raise ValueError("Invalid value for `daily_refresh`, must not be `None`")  # noqa: E501

        self._daily_refresh = daily_refresh

    @property
    def id(self):
        """Gets the id of this OauthAuthorizedResponseData.  # noqa: E501

        the `id` of the connection  # noqa: E501

        :return: The id of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OauthAuthorizedResponseData.

        the `id` of the connection  # noqa: E501

        :param id: The id of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def show_consent_confirmation(self):
        """Gets the show_consent_confirmation of this OauthAuthorizedResponseData.  # noqa: E501

        whether any consent was given for this connection on Salt Edge side  # noqa: E501

        :return: The show_consent_confirmation of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._show_consent_confirmation

    @show_consent_confirmation.setter
    def show_consent_confirmation(self, show_consent_confirmation):
        """Sets the show_consent_confirmation of this OauthAuthorizedResponseData.

        whether any consent was given for this connection on Salt Edge side  # noqa: E501

        :param show_consent_confirmation: The show_consent_confirmation of this OauthAuthorizedResponseData.  # noqa: E501
        :type: bool
        """
        if show_consent_confirmation is None:
            raise ValueError("Invalid value for `show_consent_confirmation`, must not be `None`")  # noqa: E501

        self._show_consent_confirmation = show_consent_confirmation

    @property
    def last_consent_id(self):
        """Gets the last_consent_id of this OauthAuthorizedResponseData.  # noqa: E501

        the `id` of the last [consent](#consents)  # noqa: E501

        :return: The last_consent_id of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._last_consent_id

    @last_consent_id.setter
    def last_consent_id(self, last_consent_id):
        """Sets the last_consent_id of this OauthAuthorizedResponseData.

        the `id` of the last [consent](#consents)  # noqa: E501

        :param last_consent_id: The last_consent_id of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if last_consent_id is None:
            raise ValueError("Invalid value for `last_consent_id`, must not be `None`")  # noqa: E501

        self._last_consent_id = last_consent_id

    @property
    def last_attempt(self):
        """Gets the last_attempt of this OauthAuthorizedResponseData.  # noqa: E501


        :return: The last_attempt of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: SimplifiedAttempt
        """
        return self._last_attempt

    @last_attempt.setter
    def last_attempt(self, last_attempt):
        """Sets the last_attempt of this OauthAuthorizedResponseData.


        :param last_attempt: The last_attempt of this OauthAuthorizedResponseData.  # noqa: E501
        :type: SimplifiedAttempt
        """
        if last_attempt is None:
            raise ValueError("Invalid value for `last_attempt`, must not be `None`")  # noqa: E501

        self._last_attempt = last_attempt

    @property
    def last_success_at(self):
        """Gets the last_success_at of this OauthAuthorizedResponseData.  # noqa: E501

        time when the connection was successfully fetched  # noqa: E501

        :return: The last_success_at of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._last_success_at

    @last_success_at.setter
    def last_success_at(self, last_success_at):
        """Sets the last_success_at of this OauthAuthorizedResponseData.

        time when the connection was successfully fetched  # noqa: E501

        :param last_success_at: The last_success_at of this OauthAuthorizedResponseData.  # noqa: E501
        :type: datetime
        """
        if last_success_at is None:
            raise ValueError("Invalid value for `last_success_at`, must not be `None`")  # noqa: E501

        self._last_success_at = last_success_at

    @property
    def next_refresh_possible_at(self):
        """Gets the next_refresh_possible_at of this OauthAuthorizedResponseData.  # noqa: E501

        when the next refresh will be available. May contain `null` value if connection has `automatic_fetch` set as `false`, or is already processing  # noqa: E501

        :return: The next_refresh_possible_at of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._next_refresh_possible_at

    @next_refresh_possible_at.setter
    def next_refresh_possible_at(self, next_refresh_possible_at):
        """Sets the next_refresh_possible_at of this OauthAuthorizedResponseData.

        when the next refresh will be available. May contain `null` value if connection has `automatic_fetch` set as `false`, or is already processing  # noqa: E501

        :param next_refresh_possible_at: The next_refresh_possible_at of this OauthAuthorizedResponseData.  # noqa: E501
        :type: datetime
        """
        if next_refresh_possible_at is None:
            raise ValueError("Invalid value for `next_refresh_possible_at`, must not be `None`")  # noqa: E501

        self._next_refresh_possible_at = next_refresh_possible_at

    @property
    def provider_id(self):
        """Gets the provider_id of this OauthAuthorizedResponseData.  # noqa: E501

        the `id` of the provider the connection belongs to  # noqa: E501

        :return: The provider_id of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this OauthAuthorizedResponseData.

        the `id` of the provider the connection belongs to  # noqa: E501

        :param provider_id: The provider_id of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def provider_code(self):
        """Gets the provider_code of this OauthAuthorizedResponseData.  # noqa: E501

        the code of the provider the connection belongs to  # noqa: E501

        :return: The provider_code of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._provider_code

    @provider_code.setter
    def provider_code(self, provider_code):
        """Sets the provider_code of this OauthAuthorizedResponseData.

        the code of the provider the connection belongs to  # noqa: E501

        :param provider_code: The provider_code of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if provider_code is None:
            raise ValueError("Invalid value for `provider_code`, must not be `None`")  # noqa: E501

        self._provider_code = provider_code

    @property
    def provider_name(self):
        """Gets the provider_name of this OauthAuthorizedResponseData.  # noqa: E501

        the name of the provider the connection belongs to  # noqa: E501

        :return: The provider_name of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this OauthAuthorizedResponseData.

        the name of the provider the connection belongs to  # noqa: E501

        :param provider_name: The provider_name of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")  # noqa: E501

        self._provider_name = provider_name

    @property
    def status(self):
        """Gets the status of this OauthAuthorizedResponseData.  # noqa: E501


        :return: The status of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OauthAuthorizedResponseData.


        :param status: The status of this OauthAuthorizedResponseData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "inactive", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def store_credentials(self):
        """Gets the store_credentials of this OauthAuthorizedResponseData.  # noqa: E501

        whether the credentials were stored on our side  # noqa: E501

        :return: The store_credentials of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._store_credentials

    @store_credentials.setter
    def store_credentials(self, store_credentials):
        """Sets the store_credentials of this OauthAuthorizedResponseData.

        whether the credentials were stored on our side  # noqa: E501

        :param store_credentials: The store_credentials of this OauthAuthorizedResponseData.  # noqa: E501
        :type: bool
        """
        if store_credentials is None:
            raise ValueError("Invalid value for `store_credentials`, must not be `None`")  # noqa: E501

        self._store_credentials = store_credentials

    @property
    def updated_at(self):
        """Gets the updated_at of this OauthAuthorizedResponseData.  # noqa: E501

        the last time when the connection's balance was changed, new accounts were imported or new transactions added/removed  # noqa: E501

        :return: The updated_at of this OauthAuthorizedResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OauthAuthorizedResponseData.

        the last time when the connection's balance was changed, new accounts were imported or new transactions added/removed  # noqa: E501

        :param updated_at: The updated_at of this OauthAuthorizedResponseData.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthAuthorizedResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthAuthorizedResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
