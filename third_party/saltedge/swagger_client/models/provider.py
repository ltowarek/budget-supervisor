# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Provider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'name': 'str',
        'mode': 'str',
        'status': 'str',
        'automatic_fetch': 'bool',
        'customer_notified_on_sign_in': 'bool',
        'interactive': 'bool',
        'identification_mode': 'str',
        'instruction': 'str',
        'home_url': 'str',
        'login_url': 'str',
        'logo_url': 'str',
        'country_code': 'str',
        'refresh_timeout': 'int',
        'holder_info': 'list[str]',
        'max_consent_days': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'timezone': 'str',
        'max_interactive_delay': 'int',
        'optional_interactivity': 'bool',
        'regulated': 'bool',
        'max_fetch_interval': 'int',
        'supported_fetch_scopes': 'list[str]',
        'supported_account_extra_fields': 'list[str]',
        'supported_transaction_extra_fields': 'list[str]',
        'supported_account_natures': 'list[str]',
        'supported_account_types': 'list[str]',
        'identification_codes': 'list[str]',
        'supported_iframe_embedding': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'mode': 'mode',
        'status': 'status',
        'automatic_fetch': 'automatic_fetch',
        'customer_notified_on_sign_in': 'customer_notified_on_sign_in',
        'interactive': 'interactive',
        'identification_mode': 'identification_mode',
        'instruction': 'instruction',
        'home_url': 'home_url',
        'login_url': 'login_url',
        'logo_url': 'logo_url',
        'country_code': 'country_code',
        'refresh_timeout': 'refresh_timeout',
        'holder_info': 'holder_info',
        'max_consent_days': 'max_consent_days',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'timezone': 'timezone',
        'max_interactive_delay': 'max_interactive_delay',
        'optional_interactivity': 'optional_interactivity',
        'regulated': 'regulated',
        'max_fetch_interval': 'max_fetch_interval',
        'supported_fetch_scopes': 'supported_fetch_scopes',
        'supported_account_extra_fields': 'supported_account_extra_fields',
        'supported_transaction_extra_fields': 'supported_transaction_extra_fields',
        'supported_account_natures': 'supported_account_natures',
        'supported_account_types': 'supported_account_types',
        'identification_codes': 'identification_codes',
        'supported_iframe_embedding': 'supported_iframe_embedding'
    }

    def __init__(self, id=None, code=None, name=None, mode=None, status=None, automatic_fetch=None, customer_notified_on_sign_in=None, interactive=None, identification_mode=None, instruction=None, home_url=None, login_url=None, logo_url=None, country_code=None, refresh_timeout=None, holder_info=None, max_consent_days=None, created_at=None, updated_at=None, timezone=None, max_interactive_delay=None, optional_interactivity=None, regulated=None, max_fetch_interval=None, supported_fetch_scopes=None, supported_account_extra_fields=None, supported_transaction_extra_fields=None, supported_account_natures=None, supported_account_types=None, identification_codes=None, supported_iframe_embedding=None):  # noqa: E501
        """Provider - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._name = None
        self._mode = None
        self._status = None
        self._automatic_fetch = None
        self._customer_notified_on_sign_in = None
        self._interactive = None
        self._identification_mode = None
        self._instruction = None
        self._home_url = None
        self._login_url = None
        self._logo_url = None
        self._country_code = None
        self._refresh_timeout = None
        self._holder_info = None
        self._max_consent_days = None
        self._created_at = None
        self._updated_at = None
        self._timezone = None
        self._max_interactive_delay = None
        self._optional_interactivity = None
        self._regulated = None
        self._max_fetch_interval = None
        self._supported_fetch_scopes = None
        self._supported_account_extra_fields = None
        self._supported_transaction_extra_fields = None
        self._supported_account_natures = None
        self._supported_account_types = None
        self._identification_codes = None
        self._supported_iframe_embedding = None
        self.discriminator = None
        self.id = id
        self.code = code
        self.name = name
        self.mode = mode
        self.status = status
        self.automatic_fetch = automatic_fetch
        self.customer_notified_on_sign_in = customer_notified_on_sign_in
        self.interactive = interactive
        self.identification_mode = identification_mode
        self.instruction = instruction
        self.home_url = home_url
        self.login_url = login_url
        self.logo_url = logo_url
        self.country_code = country_code
        self.refresh_timeout = refresh_timeout
        self.holder_info = holder_info
        self.max_consent_days = max_consent_days
        self.created_at = created_at
        self.updated_at = updated_at
        self.timezone = timezone
        self.max_interactive_delay = max_interactive_delay
        self.optional_interactivity = optional_interactivity
        self.regulated = regulated
        self.max_fetch_interval = max_fetch_interval
        self.supported_fetch_scopes = supported_fetch_scopes
        self.supported_account_extra_fields = supported_account_extra_fields
        self.supported_transaction_extra_fields = supported_transaction_extra_fields
        self.supported_account_natures = supported_account_natures
        self.supported_account_types = supported_account_types
        self.identification_codes = identification_codes
        self.supported_iframe_embedding = supported_iframe_embedding

    @property
    def id(self):
        """Gets the id of this Provider.  # noqa: E501

        the `id` of the provider  # noqa: E501

        :return: The id of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Provider.

        the `id` of the provider  # noqa: E501

        :param id: The id of this Provider.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def code(self):
        """Gets the code of this Provider.  # noqa: E501

        provider's code  # noqa: E501

        :return: The code of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Provider.

        provider's code  # noqa: E501

        :param code: The code of this Provider.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def name(self):
        """Gets the name of this Provider.  # noqa: E501

        provider's name  # noqa: E501

        :return: The name of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Provider.

        provider's name  # noqa: E501

        :param name: The name of this Provider.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mode(self):
        """Gets the mode of this Provider.  # noqa: E501


        :return: The mode of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Provider.


        :param mode: The mode of this Provider.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["oauth", "web", "api", "file"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def status(self):
        """Gets the status of this Provider.  # noqa: E501


        :return: The status of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Provider.


        :param status: The status of this Provider.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "inactive", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def automatic_fetch(self):
        """Gets the automatic_fetch of this Provider.  # noqa: E501

        whether the provider's connections can be automatically fetched  # noqa: E501

        :return: The automatic_fetch of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_fetch

    @automatic_fetch.setter
    def automatic_fetch(self, automatic_fetch):
        """Sets the automatic_fetch of this Provider.

        whether the provider's connections can be automatically fetched  # noqa: E501

        :param automatic_fetch: The automatic_fetch of this Provider.  # noqa: E501
        :type: bool
        """
        if automatic_fetch is None:
            raise ValueError("Invalid value for `automatic_fetch`, must not be `None`")  # noqa: E501

        self._automatic_fetch = automatic_fetch

    @property
    def customer_notified_on_sign_in(self):
        """Gets the customer_notified_on_sign_in of this Provider.  # noqa: E501

        whether the provider will notify the customer on log in attempt  # noqa: E501

        :return: The customer_notified_on_sign_in of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._customer_notified_on_sign_in

    @customer_notified_on_sign_in.setter
    def customer_notified_on_sign_in(self, customer_notified_on_sign_in):
        """Sets the customer_notified_on_sign_in of this Provider.

        whether the provider will notify the customer on log in attempt  # noqa: E501

        :param customer_notified_on_sign_in: The customer_notified_on_sign_in of this Provider.  # noqa: E501
        :type: bool
        """
        if customer_notified_on_sign_in is None:
            raise ValueError("Invalid value for `customer_notified_on_sign_in`, must not be `None`")  # noqa: E501

        self._customer_notified_on_sign_in = customer_notified_on_sign_in

    @property
    def interactive(self):
        """Gets the interactive of this Provider.  # noqa: E501

        whether the provider requires interactive input  # noqa: E501

        :return: The interactive of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._interactive

    @interactive.setter
    def interactive(self, interactive):
        """Sets the interactive of this Provider.

        whether the provider requires interactive input  # noqa: E501

        :param interactive: The interactive of this Provider.  # noqa: E501
        :type: bool
        """
        if interactive is None:
            raise ValueError("Invalid value for `interactive`, must not be `None`")  # noqa: E501

        self._interactive = interactive

    @property
    def identification_mode(self):
        """Gets the identification_mode of this Provider.  # noqa: E501

        whether the request to the provider is made with your [authorization headers](/general/#client_provider_keys) or with Salt Edge's.  # noqa: E501

        :return: The identification_mode of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._identification_mode

    @identification_mode.setter
    def identification_mode(self, identification_mode):
        """Sets the identification_mode of this Provider.

        whether the request to the provider is made with your [authorization headers](/general/#client_provider_keys) or with Salt Edge's.  # noqa: E501

        :param identification_mode: The identification_mode of this Provider.  # noqa: E501
        :type: str
        """
        if identification_mode is None:
            raise ValueError("Invalid value for `identification_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["client", "saltedge"]  # noqa: E501
        if identification_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `identification_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(identification_mode, allowed_values)
            )

        self._identification_mode = identification_mode

    @property
    def instruction(self):
        """Gets the instruction of this Provider.  # noqa: E501

        guidance on how to connect the bank  # noqa: E501

        :return: The instruction of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this Provider.

        guidance on how to connect the bank  # noqa: E501

        :param instruction: The instruction of this Provider.  # noqa: E501
        :type: str
        """
        if instruction is None:
            raise ValueError("Invalid value for `instruction`, must not be `None`")  # noqa: E501

        self._instruction = instruction

    @property
    def home_url(self):
        """Gets the home_url of this Provider.  # noqa: E501

        the URL of the main page of the provider  # noqa: E501

        :return: The home_url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._home_url

    @home_url.setter
    def home_url(self, home_url):
        """Sets the home_url of this Provider.

        the URL of the main page of the provider  # noqa: E501

        :param home_url: The home_url of this Provider.  # noqa: E501
        :type: str
        """
        if home_url is None:
            raise ValueError("Invalid value for `home_url`, must not be `None`")  # noqa: E501

        self._home_url = home_url

    @property
    def login_url(self):
        """Gets the login_url of this Provider.  # noqa: E501

        point of entrance to provider's login web interface  # noqa: E501

        :return: The login_url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this Provider.

        point of entrance to provider's login web interface  # noqa: E501

        :param login_url: The login_url of this Provider.  # noqa: E501
        :type: str
        """
        if login_url is None:
            raise ValueError("Invalid value for `login_url`, must not be `None`")  # noqa: E501

        self._login_url = login_url

    @property
    def logo_url(self):
        """Gets the logo_url of this Provider.  # noqa: E501

        the URL for the provider logo, may have a placeholder for providers with missing logos  # noqa: E501

        :return: The logo_url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Provider.

        the URL for the provider logo, may have a placeholder for providers with missing logos  # noqa: E501

        :param logo_url: The logo_url of this Provider.  # noqa: E501
        :type: str
        """
        if logo_url is None:
            raise ValueError("Invalid value for `logo_url`, must not be `None`")  # noqa: E501

        self._logo_url = logo_url

    @property
    def country_code(self):
        """Gets the country_code of this Provider.  # noqa: E501

        code of the provider's country  # noqa: E501

        :return: The country_code of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Provider.

        code of the provider's country  # noqa: E501

        :param country_code: The country_code of this Provider.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def refresh_timeout(self):
        """Gets the refresh_timeout of this Provider.  # noqa: E501

        amount of time (in minutes) after which the provider's connections are allowed to be refreshed  # noqa: E501

        :return: The refresh_timeout of this Provider.  # noqa: E501
        :rtype: int
        """
        return self._refresh_timeout

    @refresh_timeout.setter
    def refresh_timeout(self, refresh_timeout):
        """Sets the refresh_timeout of this Provider.

        amount of time (in minutes) after which the provider's connections are allowed to be refreshed  # noqa: E501

        :param refresh_timeout: The refresh_timeout of this Provider.  # noqa: E501
        :type: int
        """
        if refresh_timeout is None:
            raise ValueError("Invalid value for `refresh_timeout`, must not be `None`")  # noqa: E501

        self._refresh_timeout = refresh_timeout

    @property
    def holder_info(self):
        """Gets the holder_info of this Provider.  # noqa: E501

        contains information on the account holder details that can be fetched from this provider  # noqa: E501

        :return: The holder_info of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._holder_info

    @holder_info.setter
    def holder_info(self, holder_info):
        """Sets the holder_info of this Provider.

        contains information on the account holder details that can be fetched from this provider  # noqa: E501

        :param holder_info: The holder_info of this Provider.  # noqa: E501
        :type: list[str]
        """
        if holder_info is None:
            raise ValueError("Invalid value for `holder_info`, must not be `None`")  # noqa: E501

        self._holder_info = holder_info

    @property
    def max_consent_days(self):
        """Gets the max_consent_days of this Provider.  # noqa: E501

        maximum allowed consent duration. If it is `null`, then there are no limits  # noqa: E501

        :return: The max_consent_days of this Provider.  # noqa: E501
        :rtype: int
        """
        return self._max_consent_days

    @max_consent_days.setter
    def max_consent_days(self, max_consent_days):
        """Sets the max_consent_days of this Provider.

        maximum allowed consent duration. If it is `null`, then there are no limits  # noqa: E501

        :param max_consent_days: The max_consent_days of this Provider.  # noqa: E501
        :type: int
        """
        if max_consent_days is None:
            raise ValueError("Invalid value for `max_consent_days`, must not be `None`")  # noqa: E501

        self._max_consent_days = max_consent_days

    @property
    def created_at(self):
        """Gets the created_at of this Provider.  # noqa: E501

        time and date when the provider was integrated  # noqa: E501

        :return: The created_at of this Provider.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Provider.

        time and date when the provider was integrated  # noqa: E501

        :param created_at: The created_at of this Provider.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Provider.  # noqa: E501

        the last time when any of provider's attributes were changed  # noqa: E501

        :return: The updated_at of this Provider.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Provider.

        the last time when any of provider's attributes were changed  # noqa: E501

        :param updated_at: The updated_at of this Provider.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def timezone(self):
        """Gets the timezone of this Provider.  # noqa: E501

        time zone data of capital/major city in a region corresponding to the provider  # noqa: E501

        :return: The timezone of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Provider.

        time zone data of capital/major city in a region corresponding to the provider  # noqa: E501

        :param timezone: The timezone of this Provider.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def max_interactive_delay(self):
        """Gets the max_interactive_delay of this Provider.  # noqa: E501

        delay in seconds before `InteractiveAdapterTimeout` error will be raised  # noqa: E501

        :return: The max_interactive_delay of this Provider.  # noqa: E501
        :rtype: int
        """
        return self._max_interactive_delay

    @max_interactive_delay.setter
    def max_interactive_delay(self, max_interactive_delay):
        """Sets the max_interactive_delay of this Provider.

        delay in seconds before `InteractiveAdapterTimeout` error will be raised  # noqa: E501

        :param max_interactive_delay: The max_interactive_delay of this Provider.  # noqa: E501
        :type: int
        """
        if max_interactive_delay is None:
            raise ValueError("Invalid value for `max_interactive_delay`, must not be `None`")  # noqa: E501

        self._max_interactive_delay = max_interactive_delay

    @property
    def optional_interactivity(self):
        """Gets the optional_interactivity of this Provider.  # noqa: E501

        provider which supports flipping of the `interactive` and `automatic_fetch` flags after connect  # noqa: E501

        :return: The optional_interactivity of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._optional_interactivity

    @optional_interactivity.setter
    def optional_interactivity(self, optional_interactivity):
        """Sets the optional_interactivity of this Provider.

        provider which supports flipping of the `interactive` and `automatic_fetch` flags after connect  # noqa: E501

        :param optional_interactivity: The optional_interactivity of this Provider.  # noqa: E501
        :type: bool
        """
        if optional_interactivity is None:
            raise ValueError("Invalid value for `optional_interactivity`, must not be `None`")  # noqa: E501

        self._optional_interactivity = optional_interactivity

    @property
    def regulated(self):
        """Gets the regulated of this Provider.  # noqa: E501

        whether the provider is integrated via a regulated channel under PSD2  # noqa: E501

        :return: The regulated of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._regulated

    @regulated.setter
    def regulated(self, regulated):
        """Sets the regulated of this Provider.

        whether the provider is integrated via a regulated channel under PSD2  # noqa: E501

        :param regulated: The regulated of this Provider.  # noqa: E501
        :type: bool
        """
        if regulated is None:
            raise ValueError("Invalid value for `regulated`, must not be `None`")  # noqa: E501

        self._regulated = regulated

    @property
    def max_fetch_interval(self):
        """Gets the max_fetch_interval of this Provider.  # noqa: E501

        Maximum period of days that a provider can return from its interface  # noqa: E501

        :return: The max_fetch_interval of this Provider.  # noqa: E501
        :rtype: int
        """
        return self._max_fetch_interval

    @max_fetch_interval.setter
    def max_fetch_interval(self, max_fetch_interval):
        """Sets the max_fetch_interval of this Provider.

        Maximum period of days that a provider can return from its interface  # noqa: E501

        :param max_fetch_interval: The max_fetch_interval of this Provider.  # noqa: E501
        :type: int
        """
        if max_fetch_interval is None:
            raise ValueError("Invalid value for `max_fetch_interval`, must not be `None`")  # noqa: E501

        self._max_fetch_interval = max_fetch_interval

    @property
    def supported_fetch_scopes(self):
        """Gets the supported_fetch_scopes of this Provider.  # noqa: E501

        array of strings with supported `fetch_scopes`  # noqa: E501

        :return: The supported_fetch_scopes of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_fetch_scopes

    @supported_fetch_scopes.setter
    def supported_fetch_scopes(self, supported_fetch_scopes):
        """Sets the supported_fetch_scopes of this Provider.

        array of strings with supported `fetch_scopes`  # noqa: E501

        :param supported_fetch_scopes: The supported_fetch_scopes of this Provider.  # noqa: E501
        :type: list[str]
        """
        if supported_fetch_scopes is None:
            raise ValueError("Invalid value for `supported_fetch_scopes`, must not be `None`")  # noqa: E501

        self._supported_fetch_scopes = supported_fetch_scopes

    @property
    def supported_account_extra_fields(self):
        """Gets the supported_account_extra_fields of this Provider.  # noqa: E501

        array of possible [account extra](#accounts-extra) fields to be fetched  # noqa: E501

        :return: The supported_account_extra_fields of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_account_extra_fields

    @supported_account_extra_fields.setter
    def supported_account_extra_fields(self, supported_account_extra_fields):
        """Sets the supported_account_extra_fields of this Provider.

        array of possible [account extra](#accounts-extra) fields to be fetched  # noqa: E501

        :param supported_account_extra_fields: The supported_account_extra_fields of this Provider.  # noqa: E501
        :type: list[str]
        """
        if supported_account_extra_fields is None:
            raise ValueError("Invalid value for `supported_account_extra_fields`, must not be `None`")  # noqa: E501

        self._supported_account_extra_fields = supported_account_extra_fields

    @property
    def supported_transaction_extra_fields(self):
        """Gets the supported_transaction_extra_fields of this Provider.  # noqa: E501

        array of possible [transaction extra](#transactions-extra) fields to be fetched  # noqa: E501

        :return: The supported_transaction_extra_fields of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_transaction_extra_fields

    @supported_transaction_extra_fields.setter
    def supported_transaction_extra_fields(self, supported_transaction_extra_fields):
        """Sets the supported_transaction_extra_fields of this Provider.

        array of possible [transaction extra](#transactions-extra) fields to be fetched  # noqa: E501

        :param supported_transaction_extra_fields: The supported_transaction_extra_fields of this Provider.  # noqa: E501
        :type: list[str]
        """
        if supported_transaction_extra_fields is None:
            raise ValueError("Invalid value for `supported_transaction_extra_fields`, must not be `None`")  # noqa: E501

        self._supported_transaction_extra_fields = supported_transaction_extra_fields

    @property
    def supported_account_natures(self):
        """Gets the supported_account_natures of this Provider.  # noqa: E501

        array of possible [account natures](#accounts-attributes) to be fetched  # noqa: E501

        :return: The supported_account_natures of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_account_natures

    @supported_account_natures.setter
    def supported_account_natures(self, supported_account_natures):
        """Sets the supported_account_natures of this Provider.

        array of possible [account natures](#accounts-attributes) to be fetched  # noqa: E501

        :param supported_account_natures: The supported_account_natures of this Provider.  # noqa: E501
        :type: list[str]
        """
        if supported_account_natures is None:
            raise ValueError("Invalid value for `supported_account_natures`, must not be `None`")  # noqa: E501

        self._supported_account_natures = supported_account_natures

    @property
    def supported_account_types(self):
        """Gets the supported_account_types of this Provider.  # noqa: E501


        :return: The supported_account_types of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_account_types

    @supported_account_types.setter
    def supported_account_types(self, supported_account_types):
        """Sets the supported_account_types of this Provider.


        :param supported_account_types: The supported_account_types of this Provider.  # noqa: E501
        :type: list[str]
        """
        if supported_account_types is None:
            raise ValueError("Invalid value for `supported_account_types`, must not be `None`")  # noqa: E501
        allowed_values = ["personal", "business"]  # noqa: E501
        if not set(supported_account_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_account_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(supported_account_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_account_types = supported_account_types

    @property
    def identification_codes(self):
        """Gets the identification_codes of this Provider.  # noqa: E501

        List of codes identifying supported branches of a specific provider. It may include BLZ(Germany), ABI+CAB(Italy), Branch Codes(France) etc.  # noqa: E501

        :return: The identification_codes of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this Provider.

        List of codes identifying supported branches of a specific provider. It may include BLZ(Germany), ABI+CAB(Italy), Branch Codes(France) etc.  # noqa: E501

        :param identification_codes: The identification_codes of this Provider.  # noqa: E501
        :type: list[str]
        """
        if identification_codes is None:
            raise ValueError("Invalid value for `identification_codes`, must not be `None`")  # noqa: E501

        self._identification_codes = identification_codes

    @property
    def supported_iframe_embedding(self):
        """Gets the supported_iframe_embedding of this Provider.  # noqa: E501


        :return: The supported_iframe_embedding of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._supported_iframe_embedding

    @supported_iframe_embedding.setter
    def supported_iframe_embedding(self, supported_iframe_embedding):
        """Sets the supported_iframe_embedding of this Provider.


        :param supported_iframe_embedding: The supported_iframe_embedding of this Provider.  # noqa: E501
        :type: bool
        """
        if supported_iframe_embedding is None:
            raise ValueError("Invalid value for `supported_iframe_embedding`, must not be `None`")  # noqa: E501

        self._supported_iframe_embedding = supported_iframe_embedding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Provider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Provider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
