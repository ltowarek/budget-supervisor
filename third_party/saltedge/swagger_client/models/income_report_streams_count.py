# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncomeReportStreamsCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'regular': 'int',
        'irregular': 'int',
        'maximum_overlapping': 'int'
    }

    attribute_map = {
        'regular': 'regular',
        'irregular': 'irregular',
        'maximum_overlapping': 'maximum_overlapping'
    }

    def __init__(self, regular=None, irregular=None, maximum_overlapping=None):  # noqa: E501
        """IncomeReportStreamsCount - a model defined in Swagger"""  # noqa: E501
        self._regular = None
        self._irregular = None
        self._maximum_overlapping = None
        self.discriminator = None
        self.regular = regular
        self.irregular = irregular
        self.maximum_overlapping = maximum_overlapping

    @property
    def regular(self):
        """Gets the regular of this IncomeReportStreamsCount.  # noqa: E501

        number of regular income/expense streams  # noqa: E501

        :return: The regular of this IncomeReportStreamsCount.  # noqa: E501
        :rtype: int
        """
        return self._regular

    @regular.setter
    def regular(self, regular):
        """Sets the regular of this IncomeReportStreamsCount.

        number of regular income/expense streams  # noqa: E501

        :param regular: The regular of this IncomeReportStreamsCount.  # noqa: E501
        :type: int
        """
        if regular is None:
            raise ValueError("Invalid value for `regular`, must not be `None`")  # noqa: E501

        self._regular = regular

    @property
    def irregular(self):
        """Gets the irregular of this IncomeReportStreamsCount.  # noqa: E501

        number of irregular income/expense streams  <strong>Note:</strong> the number always equals to 1, because the irregular stream contains all the irregular transactions, which have not become a part of any regular stream, as they are not consistent, regular and periodic.   # noqa: E501

        :return: The irregular of this IncomeReportStreamsCount.  # noqa: E501
        :rtype: int
        """
        return self._irregular

    @irregular.setter
    def irregular(self, irregular):
        """Sets the irregular of this IncomeReportStreamsCount.

        number of irregular income/expense streams  <strong>Note:</strong> the number always equals to 1, because the irregular stream contains all the irregular transactions, which have not become a part of any regular stream, as they are not consistent, regular and periodic.   # noqa: E501

        :param irregular: The irregular of this IncomeReportStreamsCount.  # noqa: E501
        :type: int
        """
        if irregular is None:
            raise ValueError("Invalid value for `irregular`, must not be `None`")  # noqa: E501

        self._irregular = irregular

    @property
    def maximum_overlapping(self):
        """Gets the maximum_overlapping of this IncomeReportStreamsCount.  # noqa: E501

        maximum number of regular overlapping streams at the same time  # noqa: E501

        :return: The maximum_overlapping of this IncomeReportStreamsCount.  # noqa: E501
        :rtype: int
        """
        return self._maximum_overlapping

    @maximum_overlapping.setter
    def maximum_overlapping(self, maximum_overlapping):
        """Sets the maximum_overlapping of this IncomeReportStreamsCount.

        maximum number of regular overlapping streams at the same time  # noqa: E501

        :param maximum_overlapping: The maximum_overlapping of this IncomeReportStreamsCount.  # noqa: E501
        :type: int
        """
        if maximum_overlapping is None:
            raise ValueError("Invalid value for `maximum_overlapping`, must not be `None`")  # noqa: E501

        self._maximum_overlapping = maximum_overlapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncomeReportStreamsCount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncomeReportStreamsCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
