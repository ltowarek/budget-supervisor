# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.holder_info_extra import HolderInfoExtra  # noqa: F401,E501

class HolderInfo(HolderInfoExtra):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'list[str]',
        'emails': 'list[str]',
        'phone_numbers': 'list[str]',
        'addresses': 'list[HolderInfoAddresses]'
    }
    if hasattr(HolderInfoExtra, "swagger_types"):
        swagger_types.update(HolderInfoExtra.swagger_types)

    attribute_map = {
        'name': 'name',
        'emails': 'emails',
        'phone_numbers': 'phone_numbers',
        'addresses': 'addresses'
    }
    if hasattr(HolderInfoExtra, "attribute_map"):
        attribute_map.update(HolderInfoExtra.attribute_map)

    def __init__(self, name=None, emails=None, phone_numbers=None, addresses=None, *args, **kwargs):  # noqa: E501
        """HolderInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._emails = None
        self._phone_numbers = None
        self._addresses = None
        self.discriminator = None
        self.name = name
        self.emails = emails
        self.phone_numbers = phone_numbers
        self.addresses = addresses
        HolderInfoExtra.__init__(self, *args, **kwargs)

    @property
    def name(self):
        """Gets the name of this HolderInfo.  # noqa: E501

        account holder's name(s)  # noqa: E501

        :return: The name of this HolderInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HolderInfo.

        account holder's name(s)  # noqa: E501

        :param name: The name of this HolderInfo.  # noqa: E501
        :type: list[str]
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def emails(self):
        """Gets the emails of this HolderInfo.  # noqa: E501

        account holder's email(s)  # noqa: E501

        :return: The emails of this HolderInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this HolderInfo.

        account holder's email(s)  # noqa: E501

        :param emails: The emails of this HolderInfo.  # noqa: E501
        :type: list[str]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")  # noqa: E501

        self._emails = emails

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this HolderInfo.  # noqa: E501

        account holder's phone number(s)  # noqa: E501

        :return: The phone_numbers of this HolderInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this HolderInfo.

        account holder's phone number(s)  # noqa: E501

        :param phone_numbers: The phone_numbers of this HolderInfo.  # noqa: E501
        :type: list[str]
        """
        if phone_numbers is None:
            raise ValueError("Invalid value for `phone_numbers`, must not be `None`")  # noqa: E501

        self._phone_numbers = phone_numbers

    @property
    def addresses(self):
        """Gets the addresses of this HolderInfo.  # noqa: E501

        account holder's address(es)  # noqa: E501

        :return: The addresses of this HolderInfo.  # noqa: E501
        :rtype: list[HolderInfoAddresses]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this HolderInfo.

        account holder's address(es)  # noqa: E501

        :param addresses: The addresses of this HolderInfo.  # noqa: E501
        :type: list[HolderInfoAddresses]
        """
        if addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")  # noqa: E501

        self._addresses = addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HolderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HolderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
