# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalanceReportAverageDaily(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'start_date': 'date',
        'end_date': 'date'
    }

    attribute_map = {
        'amount': 'amount',
        'start_date': 'start_date',
        'end_date': 'end_date'
    }

    def __init__(self, amount=None, start_date=None, end_date=None):  # noqa: E501
        """BalanceReportAverageDaily - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None
        self.amount = amount
        self.start_date = start_date
        self.end_date = end_date

    @property
    def amount(self):
        """Gets the amount of this BalanceReportAverageDaily.  # noqa: E501

        average balance amount  # noqa: E501

        :return: The amount of this BalanceReportAverageDaily.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BalanceReportAverageDaily.

        average balance amount  # noqa: E501

        :param amount: The amount of this BalanceReportAverageDaily.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def start_date(self):
        """Gets the start_date of this BalanceReportAverageDaily.  # noqa: E501

        the date of the first [transaction](#transactions) within the date range used for daily average balance calculation  # noqa: E501

        :return: The start_date of this BalanceReportAverageDaily.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BalanceReportAverageDaily.

        the date of the first [transaction](#transactions) within the date range used for daily average balance calculation  # noqa: E501

        :param start_date: The start_date of this BalanceReportAverageDaily.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this BalanceReportAverageDaily.  # noqa: E501

        the date of the last [transaction](#transactions) within the date range used for daily average balance calculation  # noqa: E501

        :return: The end_date of this BalanceReportAverageDaily.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BalanceReportAverageDaily.

        the date of the last [transaction](#transactions) within the date range used for daily average balance calculation  # noqa: E501

        :param end_date: The end_date of this BalanceReportAverageDaily.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceReportAverageDaily, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceReportAverageDaily):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
