# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncomeReportStreams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'regular_amount': 'float',
        'irregular_amount': 'float',
        'count': 'IncomeReportStreamsCount',
        'regular': 'list[IncomeReportStreamsRegular]',
        'irregular': 'IncomeReportStreamsIrregular'
    }

    attribute_map = {
        'regular_amount': 'regular_amount',
        'irregular_amount': 'irregular_amount',
        'count': 'count',
        'regular': 'regular',
        'irregular': 'irregular'
    }

    def __init__(self, regular_amount=None, irregular_amount=None, count=None, regular=None, irregular=None):  # noqa: E501
        """IncomeReportStreams - a model defined in Swagger"""  # noqa: E501
        self._regular_amount = None
        self._irregular_amount = None
        self._count = None
        self._regular = None
        self._irregular = None
        self.discriminator = None
        self.regular_amount = regular_amount
        self.irregular_amount = irregular_amount
        self.count = count
        self.regular = regular
        self.irregular = irregular

    @property
    def regular_amount(self):
        """Gets the regular_amount of this IncomeReportStreams.  # noqa: E501

        the total amount of regular income/expense  # noqa: E501

        :return: The regular_amount of this IncomeReportStreams.  # noqa: E501
        :rtype: float
        """
        return self._regular_amount

    @regular_amount.setter
    def regular_amount(self, regular_amount):
        """Sets the regular_amount of this IncomeReportStreams.

        the total amount of regular income/expense  # noqa: E501

        :param regular_amount: The regular_amount of this IncomeReportStreams.  # noqa: E501
        :type: float
        """
        if regular_amount is None:
            raise ValueError("Invalid value for `regular_amount`, must not be `None`")  # noqa: E501

        self._regular_amount = regular_amount

    @property
    def irregular_amount(self):
        """Gets the irregular_amount of this IncomeReportStreams.  # noqa: E501

        the total amount of irregular income/expense  # noqa: E501

        :return: The irregular_amount of this IncomeReportStreams.  # noqa: E501
        :rtype: float
        """
        return self._irregular_amount

    @irregular_amount.setter
    def irregular_amount(self, irregular_amount):
        """Sets the irregular_amount of this IncomeReportStreams.

        the total amount of irregular income/expense  # noqa: E501

        :param irregular_amount: The irregular_amount of this IncomeReportStreams.  # noqa: E501
        :type: float
        """
        if irregular_amount is None:
            raise ValueError("Invalid value for `irregular_amount`, must not be `None`")  # noqa: E501

        self._irregular_amount = irregular_amount

    @property
    def count(self):
        """Gets the count of this IncomeReportStreams.  # noqa: E501


        :return: The count of this IncomeReportStreams.  # noqa: E501
        :rtype: IncomeReportStreamsCount
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this IncomeReportStreams.


        :param count: The count of this IncomeReportStreams.  # noqa: E501
        :type: IncomeReportStreamsCount
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def regular(self):
        """Gets the regular of this IncomeReportStreams.  # noqa: E501

        regular income/expense stream  # noqa: E501

        :return: The regular of this IncomeReportStreams.  # noqa: E501
        :rtype: list[IncomeReportStreamsRegular]
        """
        return self._regular

    @regular.setter
    def regular(self, regular):
        """Sets the regular of this IncomeReportStreams.

        regular income/expense stream  # noqa: E501

        :param regular: The regular of this IncomeReportStreams.  # noqa: E501
        :type: list[IncomeReportStreamsRegular]
        """
        if regular is None:
            raise ValueError("Invalid value for `regular`, must not be `None`")  # noqa: E501

        self._regular = regular

    @property
    def irregular(self):
        """Gets the irregular of this IncomeReportStreams.  # noqa: E501


        :return: The irregular of this IncomeReportStreams.  # noqa: E501
        :rtype: IncomeReportStreamsIrregular
        """
        return self._irregular

    @irregular.setter
    def irregular(self, irregular):
        """Sets the irregular of this IncomeReportStreams.


        :param irregular: The irregular of this IncomeReportStreams.  # noqa: E501
        :type: IncomeReportStreamsIrregular
        """
        if irregular is None:
            raise ValueError("Invalid value for `irregular`, must not be `None`")  # noqa: E501

        self._irregular = irregular

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncomeReportStreams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncomeReportStreams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
