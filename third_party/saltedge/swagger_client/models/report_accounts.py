# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportAccounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'nature': 'str',
        'balance': 'float',
        'original_balance': 'float',
        'original_currency_code': 'str',
        'transactions': 'ReportTransactions'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'nature': 'nature',
        'balance': 'balance',
        'original_balance': 'original_balance',
        'original_currency_code': 'original_currency_code',
        'transactions': 'transactions'
    }

    def __init__(self, id=None, name=None, nature=None, balance=None, original_balance=None, original_currency_code=None, transactions=None):  # noqa: E501
        """ReportAccounts - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._nature = None
        self._balance = None
        self._original_balance = None
        self._original_currency_code = None
        self._transactions = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.nature = nature
        self.balance = balance
        self.original_balance = original_balance
        self.original_currency_code = original_currency_code
        self.transactions = transactions

    @property
    def id(self):
        """Gets the id of this ReportAccounts.  # noqa: E501

        the `id` of the [account](#accounts)  # noqa: E501

        :return: The id of this ReportAccounts.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportAccounts.

        the `id` of the [account](#accounts)  # noqa: E501

        :param id: The id of this ReportAccounts.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReportAccounts.  # noqa: E501

        the unique name of the account  # noqa: E501

        :return: The name of this ReportAccounts.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportAccounts.

        the unique name of the account  # noqa: E501

        :param name: The name of this ReportAccounts.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nature(self):
        """Gets the nature of this ReportAccounts.  # noqa: E501

        The type of the account.  # noqa: E501

        :return: The nature of this ReportAccounts.  # noqa: E501
        :rtype: str
        """
        return self._nature

    @nature.setter
    def nature(self, nature):
        """Sets the nature of this ReportAccounts.

        The type of the account.  # noqa: E501

        :param nature: The nature of this ReportAccounts.  # noqa: E501
        :type: str
        """
        if nature is None:
            raise ValueError("Invalid value for `nature`, must not be `None`")  # noqa: E501
        allowed_values = ["account", "bonus", "card", "checking", "credit", "credit_card", "debit_card", "ewallet", "insurance", "investment", "loan", "mortgage", "savings"]  # noqa: E501
        if nature not in allowed_values:
            raise ValueError(
                "Invalid value for `nature` ({0}), must be one of {1}"  # noqa: E501
                .format(nature, allowed_values)
            )

        self._nature = nature

    @property
    def balance(self):
        """Gets the balance of this ReportAccounts.  # noqa: E501

        the account's current balance in currency used for report's generation  # noqa: E501

        :return: The balance of this ReportAccounts.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ReportAccounts.

        the account's current balance in currency used for report's generation  # noqa: E501

        :param balance: The balance of this ReportAccounts.  # noqa: E501
        :type: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def original_balance(self):
        """Gets the original_balance of this ReportAccounts.  # noqa: E501

        the account's current balance in account's original currency  # noqa: E501

        :return: The original_balance of this ReportAccounts.  # noqa: E501
        :rtype: float
        """
        return self._original_balance

    @original_balance.setter
    def original_balance(self, original_balance):
        """Sets the original_balance of this ReportAccounts.

        the account's current balance in account's original currency  # noqa: E501

        :param original_balance: The original_balance of this ReportAccounts.  # noqa: E501
        :type: float
        """
        if original_balance is None:
            raise ValueError("Invalid value for `original_balance`, must not be `None`")  # noqa: E501

        self._original_balance = original_balance

    @property
    def original_currency_code(self):
        """Gets the original_currency_code of this ReportAccounts.  # noqa: E501

        the account's original currency code  # noqa: E501

        :return: The original_currency_code of this ReportAccounts.  # noqa: E501
        :rtype: str
        """
        return self._original_currency_code

    @original_currency_code.setter
    def original_currency_code(self, original_currency_code):
        """Sets the original_currency_code of this ReportAccounts.

        the account's original currency code  # noqa: E501

        :param original_currency_code: The original_currency_code of this ReportAccounts.  # noqa: E501
        :type: str
        """
        if original_currency_code is None:
            raise ValueError("Invalid value for `original_currency_code`, must not be `None`")  # noqa: E501

        self._original_currency_code = original_currency_code

    @property
    def transactions(self):
        """Gets the transactions of this ReportAccounts.  # noqa: E501


        :return: The transactions of this ReportAccounts.  # noqa: E501
        :rtype: ReportTransactions
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this ReportAccounts.


        :param transactions: The transactions of this ReportAccounts.  # noqa: E501
        :type: ReportTransactions
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportAccounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportAccounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
