# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'ReportResult',
        'customer_id': 'int',
        'connection_ids': 'list[str]',
        'connections': 'list[ReportConnections]',
        'currency_code': 'str',
        'exchange_rates': 'object',
        'report_id': 'int',
        'report_types': 'list[str]',
        'status': 'str',
        'from_date': 'date',
        'to_date': 'date'
    }

    attribute_map = {
        'result': 'result',
        'customer_id': 'customer_id',
        'connection_ids': 'connection_ids',
        'connections': 'connections',
        'currency_code': 'currency_code',
        'exchange_rates': 'exchange_rates',
        'report_id': 'report_id',
        'report_types': 'report_types',
        'status': 'status',
        'from_date': 'from_date',
        'to_date': 'to_date'
    }

    def __init__(self, result=None, customer_id=None, connection_ids=None, connections=None, currency_code=None, exchange_rates=None, report_id=None, report_types=None, status=None, from_date=None, to_date=None):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._customer_id = None
        self._connection_ids = None
        self._connections = None
        self._currency_code = None
        self._exchange_rates = None
        self._report_id = None
        self._report_types = None
        self._status = None
        self._from_date = None
        self._to_date = None
        self.discriminator = None
        self.result = result
        self.customer_id = customer_id
        self.connection_ids = connection_ids
        self.connections = connections
        self.currency_code = currency_code
        self.exchange_rates = exchange_rates
        self.report_id = report_id
        self.report_types = report_types
        self.status = status
        self.from_date = from_date
        self.to_date = to_date

    @property
    def result(self):
        """Gets the result of this Report.  # noqa: E501


        :return: The result of this Report.  # noqa: E501
        :rtype: ReportResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Report.


        :param result: The result of this Report.  # noqa: E501
        :type: ReportResult
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def customer_id(self):
        """Gets the customer_id of this Report.  # noqa: E501

        The `id` of the [customer](#customers)  # noqa: E501

        :return: The customer_id of this Report.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Report.

        The `id` of the [customer](#customers)  # noqa: E501

        :param customer_id: The customer_id of this Report.  # noqa: E501
        :type: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def connection_ids(self):
        """Gets the connection_ids of this Report.  # noqa: E501

        `ids` of [Connections](#connections) included in report  # noqa: E501

        :return: The connection_ids of this Report.  # noqa: E501
        :rtype: list[str]
        """
        return self._connection_ids

    @connection_ids.setter
    def connection_ids(self, connection_ids):
        """Sets the connection_ids of this Report.

        `ids` of [Connections](#connections) included in report  # noqa: E501

        :param connection_ids: The connection_ids of this Report.  # noqa: E501
        :type: list[str]
        """
        if connection_ids is None:
            raise ValueError("Invalid value for `connection_ids`, must not be `None`")  # noqa: E501

        self._connection_ids = connection_ids

    @property
    def connections(self):
        """Gets the connections of this Report.  # noqa: E501

        information related to connections included in report  # noqa: E501

        :return: The connections of this Report.  # noqa: E501
        :rtype: list[ReportConnections]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this Report.

        information related to connections included in report  # noqa: E501

        :param connections: The connections of this Report.  # noqa: E501
        :type: list[ReportConnections]
        """
        if connections is None:
            raise ValueError("Invalid value for `connections`, must not be `None`")  # noqa: E501

        self._connections = connections

    @property
    def currency_code(self):
        """Gets the currency_code of this Report.  # noqa: E501

        main [currency code](#currencies) used for report's generation and value conversion  # noqa: E501

        :return: The currency_code of this Report.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Report.

        main [currency code](#currencies) used for report's generation and value conversion  # noqa: E501

        :param currency_code: The currency_code of this Report.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def exchange_rates(self):
        """Gets the exchange_rates of this Report.  # noqa: E501

        a list of exchange rates at the time of report creation  # noqa: E501

        :return: The exchange_rates of this Report.  # noqa: E501
        :rtype: object
        """
        return self._exchange_rates

    @exchange_rates.setter
    def exchange_rates(self, exchange_rates):
        """Sets the exchange_rates of this Report.

        a list of exchange rates at the time of report creation  # noqa: E501

        :param exchange_rates: The exchange_rates of this Report.  # noqa: E501
        :type: object
        """
        if exchange_rates is None:
            raise ValueError("Invalid value for `exchange_rates`, must not be `None`")  # noqa: E501

        self._exchange_rates = exchange_rates

    @property
    def report_id(self):
        """Gets the report_id of this Report.  # noqa: E501

        the `id` of the generated report  # noqa: E501

        :return: The report_id of this Report.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this Report.

        the `id` of the generated report  # noqa: E501

        :param report_id: The report_id of this Report.  # noqa: E501
        :type: int
        """
        if report_id is None:
            raise ValueError("Invalid value for `report_id`, must not be `None`")  # noqa: E501

        self._report_id = report_id

    @property
    def report_types(self):
        """Gets the report_types of this Report.  # noqa: E501

        types of generated reports.  # noqa: E501

        :return: The report_types of this Report.  # noqa: E501
        :rtype: list[str]
        """
        return self._report_types

    @report_types.setter
    def report_types(self, report_types):
        """Sets the report_types of this Report.

        types of generated reports.  # noqa: E501

        :param report_types: The report_types of this Report.  # noqa: E501
        :type: list[str]
        """
        if report_types is None:
            raise ValueError("Invalid value for `report_types`, must not be `None`")  # noqa: E501
        allowed_values = ["balance", "expense", "income", "savings"]  # noqa: E501
        if not set(report_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `report_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(report_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._report_types = report_types

    @property
    def status(self):
        """Gets the status of this Report.  # noqa: E501

        current report's status.  # noqa: E501

        :return: The status of this Report.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Report.

        current report's status.  # noqa: E501

        :param status: The status of this Report.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["initialized", "calculating", "success", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def from_date(self):
        """Gets the from_date of this Report.  # noqa: E501

        the date from which the data in the report are included  # noqa: E501

        :return: The from_date of this Report.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this Report.

        the date from which the data in the report are included  # noqa: E501

        :param from_date: The from_date of this Report.  # noqa: E501
        :type: date
        """
        if from_date is None:
            raise ValueError("Invalid value for `from_date`, must not be `None`")  # noqa: E501

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this Report.  # noqa: E501

        the date to which the data in the report are included  # noqa: E501

        :return: The to_date of this Report.  # noqa: E501
        :rtype: date
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this Report.

        the date to which the data in the report are included  # noqa: E501

        :param to_date: The to_date of this Report.  # noqa: E501
        :type: date
        """
        if to_date is None:
            raise ValueError("Invalid value for `to_date`, must not be `None`")  # noqa: E501

        self._to_date = to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
