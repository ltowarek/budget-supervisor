# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OauthConnectRequestBodyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'country_code': 'str',
        'provider_code': 'str',
        'consent': 'ConsentRequestBody',
        'attempt': 'AttemptRequestBody',
        'daily_refresh': 'bool',
        'return_connection_id': 'bool',
        'categorization': 'str',
        'include_fake_providers': 'bool'
    }

    attribute_map = {
        'customer_id': 'customer_id',
        'country_code': 'country_code',
        'provider_code': 'provider_code',
        'consent': 'consent',
        'attempt': 'attempt',
        'daily_refresh': 'daily_refresh',
        'return_connection_id': 'return_connection_id',
        'categorization': 'categorization',
        'include_fake_providers': 'include_fake_providers'
    }

    def __init__(self, customer_id=None, country_code=None, provider_code=None, consent=None, attempt=None, daily_refresh=None, return_connection_id=None, categorization='personal', include_fake_providers=None):  # noqa: E501
        """OauthConnectRequestBodyData - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._country_code = None
        self._provider_code = None
        self._consent = None
        self._attempt = None
        self._daily_refresh = None
        self._return_connection_id = None
        self._categorization = None
        self._include_fake_providers = None
        self.discriminator = None
        self.customer_id = customer_id
        self.country_code = country_code
        self.provider_code = provider_code
        self.consent = consent
        if attempt is not None:
            self.attempt = attempt
        if daily_refresh is not None:
            self.daily_refresh = daily_refresh
        if return_connection_id is not None:
            self.return_connection_id = return_connection_id
        if categorization is not None:
            self.categorization = categorization
        if include_fake_providers is not None:
            self.include_fake_providers = include_fake_providers

    @property
    def customer_id(self):
        """Gets the customer_id of this OauthConnectRequestBodyData.  # noqa: E501

        the `id` of the customer received from [customer create](#customers-create). This field is optional for ['app' authentication](/general/#services_and_apps_authentication)   # noqa: E501

        :return: The customer_id of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this OauthConnectRequestBodyData.

        the `id` of the customer received from [customer create](#customers-create). This field is optional for ['app' authentication](/general/#services_and_apps_authentication)   # noqa: E501

        :param customer_id: The customer_id of this OauthConnectRequestBodyData.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def country_code(self):
        """Gets the country_code of this OauthConnectRequestBodyData.  # noqa: E501

        the code of the country  # noqa: E501

        :return: The country_code of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OauthConnectRequestBodyData.

        the code of the country  # noqa: E501

        :param country_code: The country_code of this OauthConnectRequestBodyData.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def provider_code(self):
        """Gets the provider_code of this OauthConnectRequestBodyData.  # noqa: E501

        the code of the provider  # noqa: E501

        :return: The provider_code of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: str
        """
        return self._provider_code

    @provider_code.setter
    def provider_code(self, provider_code):
        """Sets the provider_code of this OauthConnectRequestBodyData.

        the code of the provider  # noqa: E501

        :param provider_code: The provider_code of this OauthConnectRequestBodyData.  # noqa: E501
        :type: str
        """
        if provider_code is None:
            raise ValueError("Invalid value for `provider_code`, must not be `None`")  # noqa: E501

        self._provider_code = provider_code

    @property
    def consent(self):
        """Gets the consent of this OauthConnectRequestBodyData.  # noqa: E501


        :return: The consent of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: ConsentRequestBody
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this OauthConnectRequestBodyData.


        :param consent: The consent of this OauthConnectRequestBodyData.  # noqa: E501
        :type: ConsentRequestBody
        """
        if consent is None:
            raise ValueError("Invalid value for `consent`, must not be `None`")  # noqa: E501

        self._consent = consent

    @property
    def attempt(self):
        """Gets the attempt of this OauthConnectRequestBodyData.  # noqa: E501


        :return: The attempt of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: AttemptRequestBody
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this OauthConnectRequestBodyData.


        :param attempt: The attempt of this OauthConnectRequestBodyData.  # noqa: E501
        :type: AttemptRequestBody
        """

        self._attempt = attempt

    @property
    def daily_refresh(self):
        """Gets the daily_refresh of this OauthConnectRequestBodyData.  # noqa: E501

        whether the connection should be automatically refreshed by Salt Edge.  # noqa: E501

        :return: The daily_refresh of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: bool
        """
        return self._daily_refresh

    @daily_refresh.setter
    def daily_refresh(self, daily_refresh):
        """Sets the daily_refresh of this OauthConnectRequestBodyData.

        whether the connection should be automatically refreshed by Salt Edge.  # noqa: E501

        :param daily_refresh: The daily_refresh of this OauthConnectRequestBodyData.  # noqa: E501
        :type: bool
        """

        self._daily_refresh = daily_refresh

    @property
    def return_connection_id(self):
        """Gets the return_connection_id of this OauthConnectRequestBodyData.  # noqa: E501

        whether to append `connection_id` to `return_to` URL.  # noqa: E501

        :return: The return_connection_id of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: bool
        """
        return self._return_connection_id

    @return_connection_id.setter
    def return_connection_id(self, return_connection_id):
        """Sets the return_connection_id of this OauthConnectRequestBodyData.

        whether to append `connection_id` to `return_to` URL.  # noqa: E501

        :param return_connection_id: The return_connection_id of this OauthConnectRequestBodyData.  # noqa: E501
        :type: bool
        """

        self._return_connection_id = return_connection_id

    @property
    def categorization(self):
        """Gets the categorization of this OauthConnectRequestBodyData.  # noqa: E501

        the type of categorization applied.  # noqa: E501

        :return: The categorization of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: str
        """
        return self._categorization

    @categorization.setter
    def categorization(self, categorization):
        """Sets the categorization of this OauthConnectRequestBodyData.

        the type of categorization applied.  # noqa: E501

        :param categorization: The categorization of this OauthConnectRequestBodyData.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "personal", "business"]  # noqa: E501
        if categorization not in allowed_values:
            raise ValueError(
                "Invalid value for `categorization` ({0}), must be one of {1}"  # noqa: E501
                .format(categorization, allowed_values)
            )

        self._categorization = categorization

    @property
    def include_fake_providers(self):
        """Gets the include_fake_providers of this OauthConnectRequestBodyData.  # noqa: E501

        if sent as `true`, the customers of [live](/general/#live) clients will be able to connect [fake providers](#providers-fake).   # noqa: E501

        :return: The include_fake_providers of this OauthConnectRequestBodyData.  # noqa: E501
        :rtype: bool
        """
        return self._include_fake_providers

    @include_fake_providers.setter
    def include_fake_providers(self, include_fake_providers):
        """Sets the include_fake_providers of this OauthConnectRequestBodyData.

        if sent as `true`, the customers of [live](/general/#live) clients will be able to connect [fake providers](#providers-fake).   # noqa: E501

        :param include_fake_providers: The include_fake_providers of this OauthConnectRequestBodyData.  # noqa: E501
        :type: bool
        """

        self._include_fake_providers = include_fake_providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthConnectRequestBodyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthConnectRequestBodyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
