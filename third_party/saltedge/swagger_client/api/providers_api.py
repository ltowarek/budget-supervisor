# coding: utf-8

"""
    Salt Edge Account Information API

    API Reference for services  # noqa: E501

    OpenAPI spec version: 5.0.0
    Contact: support@saltedge.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProvidersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def providers_get(self, **kwargs):  # noqa: E501
        """List of providers  # noqa: E501

        Returns all the providers we operate with. If a provider becomes `disabled`, it is not included in the list.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_id:
        :param date from_date:
        :param str country_code:
        :param str mode:
        :param bool include_fake_providers:
        :param bool include_provider_fields:
        :param str provider_key_owner:
        :return: ProvidersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.providers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.providers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def providers_get_with_http_info(self, **kwargs):  # noqa: E501
        """List of providers  # noqa: E501

        Returns all the providers we operate with. If a provider becomes `disabled`, it is not included in the list.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_id:
        :param date from_date:
        :param str country_code:
        :param str mode:
        :param bool include_fake_providers:
        :param bool include_provider_fields:
        :param str provider_key_owner:
        :return: ProvidersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_id', 'from_date', 'country_code', 'mode', 'include_fake_providers', 'include_provider_fields', 'provider_key_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method providers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_id' in params:
            query_params.append(('from_id', params['from_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('from_date', params['from_date']))  # noqa: E501
        if 'country_code' in params:
            query_params.append(('country_code', params['country_code']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'include_fake_providers' in params:
            query_params.append(('include_fake_providers', params['include_fake_providers']))  # noqa: E501
        if 'include_provider_fields' in params:
            query_params.append(('include_provider_fields', params['include_provider_fields']))  # noqa: E501
        if 'provider_key_owner' in params:
            query_params.append(('provider_key_owner', params['provider_key_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['app_id', 'secret']  # noqa: E501

        return self.api_client.call_api(
            '/providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvidersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def providers_provider_code_get(self, provider_code, **kwargs):  # noqa: E501
        """Show a provider  # noqa: E501

        Allows you to inspect a single provider in order to give your users a proper interface to input their credentials. The response will have an array of `required_fields` and `interactive_fields`, which are explained in more detail in [the create section](#connections-create) of this reference.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_provider_code_get(provider_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_code: (required)
        :return: ProviderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.providers_provider_code_get_with_http_info(provider_code, **kwargs)  # noqa: E501
        else:
            (data) = self.providers_provider_code_get_with_http_info(provider_code, **kwargs)  # noqa: E501
            return data

    def providers_provider_code_get_with_http_info(self, provider_code, **kwargs):  # noqa: E501
        """Show a provider  # noqa: E501

        Allows you to inspect a single provider in order to give your users a proper interface to input their credentials. The response will have an array of `required_fields` and `interactive_fields`, which are explained in more detail in [the create section](#connections-create) of this reference.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_provider_code_get_with_http_info(provider_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_code: (required)
        :return: ProviderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method providers_provider_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_code' is set
        if ('provider_code' not in params or
                params['provider_code'] is None):
            raise ValueError("Missing the required parameter `provider_code` when calling `providers_provider_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_code' in params:
            path_params['provider_code'] = params['provider_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['app_id', 'secret']  # noqa: E501

        return self.api_client.call_api(
            '/providers/{provider_code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
