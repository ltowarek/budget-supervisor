# coding: utf-8

"""
    Nordigen Account Information Services API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nordigen.api_client import ApiClient


class TokenApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def j_wt_obtain(self, body, secret_id2, secret_key2, secret_id, secret_key, **kwargs):  # noqa: E501
        """j_wt_obtain  # noqa: E501

        Obtain JWT pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_obtain(body, secret_id2, secret_key2, secret_id, secret_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTObtainPair body: (required)
        :param str secret_id2: (required)
        :param str secret_key2: (required)
        :param str secret_id: (required)
        :param str secret_key: (required)
        :return: SpectacularJWTObtain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, **kwargs)  # noqa: E501
        else:
            (data) = self.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, **kwargs)  # noqa: E501
            return data

    def j_wt_obtain_with_http_info(self, body, secret_id2, secret_key2, secret_id, secret_key, **kwargs):  # noqa: E501
        """j_wt_obtain  # noqa: E501

        Obtain JWT pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTObtainPair body: (required)
        :param str secret_id2: (required)
        :param str secret_key2: (required)
        :param str secret_id: (required)
        :param str secret_key: (required)
        :return: SpectacularJWTObtain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'secret_id2', 'secret_key2', 'secret_id', 'secret_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method j_wt_obtain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_id2' is set
        if ('secret_id2' not in params or
                params['secret_id2'] is None):
            raise ValueError("Missing the required parameter `secret_id2` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_key2' is set
        if ('secret_key2' not in params or
                params['secret_key2'] is None):
            raise ValueError("Missing the required parameter `secret_key2` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_id' is set
        if ('secret_id' not in params or
                params['secret_id'] is None):
            raise ValueError("Missing the required parameter `secret_id` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_key' is set
        if ('secret_key' not in params or
                params['secret_key'] is None):
            raise ValueError("Missing the required parameter `secret_key` when calling `j_wt_obtain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'secret_id' in params:
            form_params.append(('secret_id', params['secret_id']))  # noqa: E501
        if 'secret_key' in params:
            form_params.append(('secret_key', params['secret_key']))  # noqa: E501
        if 'secret_id' in params:
            form_params.append(('secret_id', params['secret_id']))  # noqa: E501
        if 'secret_key' in params:
            form_params.append(('secret_key', params['secret_key']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/token/new/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularJWTObtain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def j_wt_obtain(self, body, secret_id2, secret_key2, secret_id, secret_key, **kwargs):  # noqa: E501
        """j_wt_obtain  # noqa: E501

        Obtain JWT pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_obtain(body, secret_id2, secret_key2, secret_id, secret_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTObtainPair body: (required)
        :param str secret_id2: (required)
        :param str secret_key2: (required)
        :param str secret_id: (required)
        :param str secret_key: (required)
        :return: SpectacularJWTObtain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, **kwargs)  # noqa: E501
        else:
            (data) = self.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, **kwargs)  # noqa: E501
            return data

    def j_wt_obtain_with_http_info(self, body, secret_id2, secret_key2, secret_id, secret_key, **kwargs):  # noqa: E501
        """j_wt_obtain  # noqa: E501

        Obtain JWT pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTObtainPair body: (required)
        :param str secret_id2: (required)
        :param str secret_key2: (required)
        :param str secret_id: (required)
        :param str secret_key: (required)
        :return: SpectacularJWTObtain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'secret_id2', 'secret_key2', 'secret_id', 'secret_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method j_wt_obtain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_id2' is set
        if ('secret_id2' not in params or
                params['secret_id2'] is None):
            raise ValueError("Missing the required parameter `secret_id2` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_key2' is set
        if ('secret_key2' not in params or
                params['secret_key2'] is None):
            raise ValueError("Missing the required parameter `secret_key2` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_id' is set
        if ('secret_id' not in params or
                params['secret_id'] is None):
            raise ValueError("Missing the required parameter `secret_id` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_key' is set
        if ('secret_key' not in params or
                params['secret_key'] is None):
            raise ValueError("Missing the required parameter `secret_key` when calling `j_wt_obtain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'secret_id' in params:
            form_params.append(('secret_id', params['secret_id']))  # noqa: E501
        if 'secret_key' in params:
            form_params.append(('secret_key', params['secret_key']))  # noqa: E501
        if 'secret_id' in params:
            form_params.append(('secret_id', params['secret_id']))  # noqa: E501
        if 'secret_key' in params:
            form_params.append(('secret_key', params['secret_key']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/token/new/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularJWTObtain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def j_wt_obtain(self, body, secret_id2, secret_key2, secret_id, secret_key, **kwargs):  # noqa: E501
        """j_wt_obtain  # noqa: E501

        Obtain JWT pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_obtain(body, secret_id2, secret_key2, secret_id, secret_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTObtainPair body: (required)
        :param str secret_id2: (required)
        :param str secret_key2: (required)
        :param str secret_id: (required)
        :param str secret_key: (required)
        :return: SpectacularJWTObtain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, **kwargs)  # noqa: E501
        else:
            (data) = self.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, **kwargs)  # noqa: E501
            return data

    def j_wt_obtain_with_http_info(self, body, secret_id2, secret_key2, secret_id, secret_key, **kwargs):  # noqa: E501
        """j_wt_obtain  # noqa: E501

        Obtain JWT pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_obtain_with_http_info(body, secret_id2, secret_key2, secret_id, secret_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTObtainPair body: (required)
        :param str secret_id2: (required)
        :param str secret_key2: (required)
        :param str secret_id: (required)
        :param str secret_key: (required)
        :return: SpectacularJWTObtain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'secret_id2', 'secret_key2', 'secret_id', 'secret_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method j_wt_obtain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_id2' is set
        if ('secret_id2' not in params or
                params['secret_id2'] is None):
            raise ValueError("Missing the required parameter `secret_id2` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_key2' is set
        if ('secret_key2' not in params or
                params['secret_key2'] is None):
            raise ValueError("Missing the required parameter `secret_key2` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_id' is set
        if ('secret_id' not in params or
                params['secret_id'] is None):
            raise ValueError("Missing the required parameter `secret_id` when calling `j_wt_obtain`")  # noqa: E501
        # verify the required parameter 'secret_key' is set
        if ('secret_key' not in params or
                params['secret_key'] is None):
            raise ValueError("Missing the required parameter `secret_key` when calling `j_wt_obtain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'secret_id' in params:
            form_params.append(('secret_id', params['secret_id']))  # noqa: E501
        if 'secret_key' in params:
            form_params.append(('secret_key', params['secret_key']))  # noqa: E501
        if 'secret_id' in params:
            form_params.append(('secret_id', params['secret_id']))  # noqa: E501
        if 'secret_key' in params:
            form_params.append(('secret_key', params['secret_key']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/token/new/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularJWTObtain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def j_wt_refresh(self, body, refresh2, access2, refresh, access, **kwargs):  # noqa: E501
        """j_wt_refresh  # noqa: E501

        Refresh access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_refresh(body, refresh2, access2, refresh, access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTRefresh body: (required)
        :param str refresh2: (required)
        :param str access2: (required)
        :param str refresh: (required)
        :param str access: (required)
        :return: SpectacularJWTRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, **kwargs)  # noqa: E501
        else:
            (data) = self.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, **kwargs)  # noqa: E501
            return data

    def j_wt_refresh_with_http_info(self, body, refresh2, access2, refresh, access, **kwargs):  # noqa: E501
        """j_wt_refresh  # noqa: E501

        Refresh access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTRefresh body: (required)
        :param str refresh2: (required)
        :param str access2: (required)
        :param str refresh: (required)
        :param str access: (required)
        :return: SpectacularJWTRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'refresh2', 'access2', 'refresh', 'access']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method j_wt_refresh" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'refresh2' is set
        if ('refresh2' not in params or
                params['refresh2'] is None):
            raise ValueError("Missing the required parameter `refresh2` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'access2' is set
        if ('access2' not in params or
                params['access2'] is None):
            raise ValueError("Missing the required parameter `access2` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'access' is set
        if ('access' not in params or
                params['access'] is None):
            raise ValueError("Missing the required parameter `access` when calling `j_wt_refresh`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/token/refresh/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularJWTRefresh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def j_wt_refresh(self, body, refresh2, access2, refresh, access, **kwargs):  # noqa: E501
        """j_wt_refresh  # noqa: E501

        Refresh access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_refresh(body, refresh2, access2, refresh, access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTRefresh body: (required)
        :param str refresh2: (required)
        :param str access2: (required)
        :param str refresh: (required)
        :param str access: (required)
        :return: SpectacularJWTRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, **kwargs)  # noqa: E501
        else:
            (data) = self.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, **kwargs)  # noqa: E501
            return data

    def j_wt_refresh_with_http_info(self, body, refresh2, access2, refresh, access, **kwargs):  # noqa: E501
        """j_wt_refresh  # noqa: E501

        Refresh access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTRefresh body: (required)
        :param str refresh2: (required)
        :param str access2: (required)
        :param str refresh: (required)
        :param str access: (required)
        :return: SpectacularJWTRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'refresh2', 'access2', 'refresh', 'access']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method j_wt_refresh" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'refresh2' is set
        if ('refresh2' not in params or
                params['refresh2'] is None):
            raise ValueError("Missing the required parameter `refresh2` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'access2' is set
        if ('access2' not in params or
                params['access2'] is None):
            raise ValueError("Missing the required parameter `access2` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'access' is set
        if ('access' not in params or
                params['access'] is None):
            raise ValueError("Missing the required parameter `access` when calling `j_wt_refresh`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/token/refresh/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularJWTRefresh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def j_wt_refresh(self, body, refresh2, access2, refresh, access, **kwargs):  # noqa: E501
        """j_wt_refresh  # noqa: E501

        Refresh access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_refresh(body, refresh2, access2, refresh, access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTRefresh body: (required)
        :param str refresh2: (required)
        :param str access2: (required)
        :param str refresh: (required)
        :param str access: (required)
        :return: SpectacularJWTRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, **kwargs)  # noqa: E501
        else:
            (data) = self.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, **kwargs)  # noqa: E501
            return data

    def j_wt_refresh_with_http_info(self, body, refresh2, access2, refresh, access, **kwargs):  # noqa: E501
        """j_wt_refresh  # noqa: E501

        Refresh access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.j_wt_refresh_with_http_info(body, refresh2, access2, refresh, access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JWTRefresh body: (required)
        :param str refresh2: (required)
        :param str access2: (required)
        :param str refresh: (required)
        :param str access: (required)
        :return: SpectacularJWTRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'refresh2', 'access2', 'refresh', 'access']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method j_wt_refresh" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'refresh2' is set
        if ('refresh2' not in params or
                params['refresh2'] is None):
            raise ValueError("Missing the required parameter `refresh2` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'access2' is set
        if ('access2' not in params or
                params['access2'] is None):
            raise ValueError("Missing the required parameter `access2` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `j_wt_refresh`")  # noqa: E501
        # verify the required parameter 'access' is set
        if ('access' not in params or
                params['access'] is None):
            raise ValueError("Missing the required parameter `access` when calling `j_wt_refresh`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/token/refresh/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularJWTRefresh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
