# coding: utf-8

"""
    Nordigen Account Information Services API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nordigen.api_client import ApiClient


class RequisitionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_requisition_by_id_v2(self, id, **kwargs):  # noqa: E501
        """delete_requisition_by_id_v2  # noqa: E501

        Delete Requisition and all End User Agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_requisition_by_id_v2(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this requisition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_requisition_by_id_v2_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_requisition_by_id_v2_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_requisition_by_id_v2_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_requisition_by_id_v2  # noqa: E501

        Delete Requisition and all End User Agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_requisition_by_id_v2_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this requisition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_requisition_by_id_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_requisition_by_id_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/requisitions/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def requisition_by_id(self, id, **kwargs):  # noqa: E501
        """requisition_by_id  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this requisition. (required)
        :return: RequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.requisition_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.requisition_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def requisition_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """requisition_by_id  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this requisition. (required)
        :return: RequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method requisition_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `requisition_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/requisitions/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequisitionV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def requisition_created(self, body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs):  # noqa: E501
        """requisition_created  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_created(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequisitionV2 body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param str redirect2: (required)
        :param Object status2: (required)
        :param str institution_id2: (required)
        :param str agreement2: (required)
        :param str reference2: (required)
        :param list[str] accounts2: (required)
        :param str user_language2: (required)
        :param str link2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param str redirect: (required)
        :param Object status: (required)
        :param str institution_id: (required)
        :param str agreement: (required)
        :param str reference: (required)
        :param list[str] accounts: (required)
        :param str user_language: (required)
        :param str link: (required)
        :return: SpectacularRequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs)  # noqa: E501
        else:
            (data) = self.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs)  # noqa: E501
            return data

    def requisition_created_with_http_info(self, body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs):  # noqa: E501
        """requisition_created  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequisitionV2 body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param str redirect2: (required)
        :param Object status2: (required)
        :param str institution_id2: (required)
        :param str agreement2: (required)
        :param str reference2: (required)
        :param list[str] accounts2: (required)
        :param str user_language2: (required)
        :param str link2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param str redirect: (required)
        :param Object status: (required)
        :param str institution_id: (required)
        :param str agreement: (required)
        :param str reference: (required)
        :param list[str] accounts: (required)
        :param str user_language: (required)
        :param str link: (required)
        :return: SpectacularRequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id2', 'created2', 'redirect2', 'status2', 'institution_id2', 'agreement2', 'reference2', 'accounts2', 'user_language2', 'link2', 'id', 'created', 'redirect', 'status', 'institution_id', 'agreement', 'reference', 'accounts', 'user_language', 'link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method requisition_created" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'created2' is set
        if ('created2' not in params or
                params['created2'] is None):
            raise ValueError("Missing the required parameter `created2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'redirect2' is set
        if ('redirect2' not in params or
                params['redirect2'] is None):
            raise ValueError("Missing the required parameter `redirect2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'status2' is set
        if ('status2' not in params or
                params['status2'] is None):
            raise ValueError("Missing the required parameter `status2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'institution_id2' is set
        if ('institution_id2' not in params or
                params['institution_id2'] is None):
            raise ValueError("Missing the required parameter `institution_id2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'agreement2' is set
        if ('agreement2' not in params or
                params['agreement2'] is None):
            raise ValueError("Missing the required parameter `agreement2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'reference2' is set
        if ('reference2' not in params or
                params['reference2'] is None):
            raise ValueError("Missing the required parameter `reference2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'accounts2' is set
        if ('accounts2' not in params or
                params['accounts2'] is None):
            raise ValueError("Missing the required parameter `accounts2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'user_language2' is set
        if ('user_language2' not in params or
                params['user_language2'] is None):
            raise ValueError("Missing the required parameter `user_language2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'link2' is set
        if ('link2' not in params or
                params['link2'] is None):
            raise ValueError("Missing the required parameter `link2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'created' is set
        if ('created' not in params or
                params['created'] is None):
            raise ValueError("Missing the required parameter `created` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'redirect' is set
        if ('redirect' not in params or
                params['redirect'] is None):
            raise ValueError("Missing the required parameter `redirect` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'institution_id' is set
        if ('institution_id' not in params or
                params['institution_id'] is None):
            raise ValueError("Missing the required parameter `institution_id` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'agreement' is set
        if ('agreement' not in params or
                params['agreement'] is None):
            raise ValueError("Missing the required parameter `agreement` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'reference' is set
        if ('reference' not in params or
                params['reference'] is None):
            raise ValueError("Missing the required parameter `reference` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'accounts' is set
        if ('accounts' not in params or
                params['accounts'] is None):
            raise ValueError("Missing the required parameter `accounts` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'user_language' is set
        if ('user_language' not in params or
                params['user_language'] is None):
            raise ValueError("Missing the required parameter `user_language` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'link' is set
        if ('link' not in params or
                params['link'] is None):
            raise ValueError("Missing the required parameter `link` when calling `requisition_created`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'redirect' in params:
            form_params.append(('redirect', params['redirect']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'agreement' in params:
            form_params.append(('agreement', params['agreement']))  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'accounts' in params:
            form_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'user_language' in params:
            form_params.append(('user_language', params['user_language']))  # noqa: E501
        if 'link' in params:
            form_params.append(('link', params['link']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'redirect' in params:
            form_params.append(('redirect', params['redirect']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'agreement' in params:
            form_params.append(('agreement', params['agreement']))  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'accounts' in params:
            form_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'user_language' in params:
            form_params.append(('user_language', params['user_language']))  # noqa: E501
        if 'link' in params:
            form_params.append(('link', params['link']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/requisitions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularRequisitionV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def requisition_created(self, body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs):  # noqa: E501
        """requisition_created  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_created(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequisitionV2 body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param str redirect2: (required)
        :param Object status2: (required)
        :param str institution_id2: (required)
        :param str agreement2: (required)
        :param str reference2: (required)
        :param list[str] accounts2: (required)
        :param str user_language2: (required)
        :param str link2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param str redirect: (required)
        :param Object status: (required)
        :param str institution_id: (required)
        :param str agreement: (required)
        :param str reference: (required)
        :param list[str] accounts: (required)
        :param str user_language: (required)
        :param str link: (required)
        :return: SpectacularRequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs)  # noqa: E501
        else:
            (data) = self.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs)  # noqa: E501
            return data

    def requisition_created_with_http_info(self, body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs):  # noqa: E501
        """requisition_created  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequisitionV2 body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param str redirect2: (required)
        :param Object status2: (required)
        :param str institution_id2: (required)
        :param str agreement2: (required)
        :param str reference2: (required)
        :param list[str] accounts2: (required)
        :param str user_language2: (required)
        :param str link2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param str redirect: (required)
        :param Object status: (required)
        :param str institution_id: (required)
        :param str agreement: (required)
        :param str reference: (required)
        :param list[str] accounts: (required)
        :param str user_language: (required)
        :param str link: (required)
        :return: SpectacularRequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id2', 'created2', 'redirect2', 'status2', 'institution_id2', 'agreement2', 'reference2', 'accounts2', 'user_language2', 'link2', 'id', 'created', 'redirect', 'status', 'institution_id', 'agreement', 'reference', 'accounts', 'user_language', 'link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method requisition_created" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'created2' is set
        if ('created2' not in params or
                params['created2'] is None):
            raise ValueError("Missing the required parameter `created2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'redirect2' is set
        if ('redirect2' not in params or
                params['redirect2'] is None):
            raise ValueError("Missing the required parameter `redirect2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'status2' is set
        if ('status2' not in params or
                params['status2'] is None):
            raise ValueError("Missing the required parameter `status2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'institution_id2' is set
        if ('institution_id2' not in params or
                params['institution_id2'] is None):
            raise ValueError("Missing the required parameter `institution_id2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'agreement2' is set
        if ('agreement2' not in params or
                params['agreement2'] is None):
            raise ValueError("Missing the required parameter `agreement2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'reference2' is set
        if ('reference2' not in params or
                params['reference2'] is None):
            raise ValueError("Missing the required parameter `reference2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'accounts2' is set
        if ('accounts2' not in params or
                params['accounts2'] is None):
            raise ValueError("Missing the required parameter `accounts2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'user_language2' is set
        if ('user_language2' not in params or
                params['user_language2'] is None):
            raise ValueError("Missing the required parameter `user_language2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'link2' is set
        if ('link2' not in params or
                params['link2'] is None):
            raise ValueError("Missing the required parameter `link2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'created' is set
        if ('created' not in params or
                params['created'] is None):
            raise ValueError("Missing the required parameter `created` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'redirect' is set
        if ('redirect' not in params or
                params['redirect'] is None):
            raise ValueError("Missing the required parameter `redirect` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'institution_id' is set
        if ('institution_id' not in params or
                params['institution_id'] is None):
            raise ValueError("Missing the required parameter `institution_id` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'agreement' is set
        if ('agreement' not in params or
                params['agreement'] is None):
            raise ValueError("Missing the required parameter `agreement` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'reference' is set
        if ('reference' not in params or
                params['reference'] is None):
            raise ValueError("Missing the required parameter `reference` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'accounts' is set
        if ('accounts' not in params or
                params['accounts'] is None):
            raise ValueError("Missing the required parameter `accounts` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'user_language' is set
        if ('user_language' not in params or
                params['user_language'] is None):
            raise ValueError("Missing the required parameter `user_language` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'link' is set
        if ('link' not in params or
                params['link'] is None):
            raise ValueError("Missing the required parameter `link` when calling `requisition_created`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'redirect' in params:
            form_params.append(('redirect', params['redirect']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'agreement' in params:
            form_params.append(('agreement', params['agreement']))  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'accounts' in params:
            form_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'user_language' in params:
            form_params.append(('user_language', params['user_language']))  # noqa: E501
        if 'link' in params:
            form_params.append(('link', params['link']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'redirect' in params:
            form_params.append(('redirect', params['redirect']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'agreement' in params:
            form_params.append(('agreement', params['agreement']))  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'accounts' in params:
            form_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'user_language' in params:
            form_params.append(('user_language', params['user_language']))  # noqa: E501
        if 'link' in params:
            form_params.append(('link', params['link']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/requisitions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularRequisitionV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def requisition_created(self, body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs):  # noqa: E501
        """requisition_created  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_created(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequisitionV2 body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param str redirect2: (required)
        :param Object status2: (required)
        :param str institution_id2: (required)
        :param str agreement2: (required)
        :param str reference2: (required)
        :param list[str] accounts2: (required)
        :param str user_language2: (required)
        :param str link2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param str redirect: (required)
        :param Object status: (required)
        :param str institution_id: (required)
        :param str agreement: (required)
        :param str reference: (required)
        :param list[str] accounts: (required)
        :param str user_language: (required)
        :param str link: (required)
        :return: SpectacularRequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs)  # noqa: E501
        else:
            (data) = self.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs)  # noqa: E501
            return data

    def requisition_created_with_http_info(self, body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, **kwargs):  # noqa: E501
        """requisition_created  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requisition_created_with_http_info(body, id2, created2, redirect2, status2, institution_id2, agreement2, reference2, accounts2, user_language2, link2, id, created, redirect, status, institution_id, agreement, reference, accounts, user_language, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequisitionV2 body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param str redirect2: (required)
        :param Object status2: (required)
        :param str institution_id2: (required)
        :param str agreement2: (required)
        :param str reference2: (required)
        :param list[str] accounts2: (required)
        :param str user_language2: (required)
        :param str link2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param str redirect: (required)
        :param Object status: (required)
        :param str institution_id: (required)
        :param str agreement: (required)
        :param str reference: (required)
        :param list[str] accounts: (required)
        :param str user_language: (required)
        :param str link: (required)
        :return: SpectacularRequisitionV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id2', 'created2', 'redirect2', 'status2', 'institution_id2', 'agreement2', 'reference2', 'accounts2', 'user_language2', 'link2', 'id', 'created', 'redirect', 'status', 'institution_id', 'agreement', 'reference', 'accounts', 'user_language', 'link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method requisition_created" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'created2' is set
        if ('created2' not in params or
                params['created2'] is None):
            raise ValueError("Missing the required parameter `created2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'redirect2' is set
        if ('redirect2' not in params or
                params['redirect2'] is None):
            raise ValueError("Missing the required parameter `redirect2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'status2' is set
        if ('status2' not in params or
                params['status2'] is None):
            raise ValueError("Missing the required parameter `status2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'institution_id2' is set
        if ('institution_id2' not in params or
                params['institution_id2'] is None):
            raise ValueError("Missing the required parameter `institution_id2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'agreement2' is set
        if ('agreement2' not in params or
                params['agreement2'] is None):
            raise ValueError("Missing the required parameter `agreement2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'reference2' is set
        if ('reference2' not in params or
                params['reference2'] is None):
            raise ValueError("Missing the required parameter `reference2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'accounts2' is set
        if ('accounts2' not in params or
                params['accounts2'] is None):
            raise ValueError("Missing the required parameter `accounts2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'user_language2' is set
        if ('user_language2' not in params or
                params['user_language2'] is None):
            raise ValueError("Missing the required parameter `user_language2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'link2' is set
        if ('link2' not in params or
                params['link2'] is None):
            raise ValueError("Missing the required parameter `link2` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'created' is set
        if ('created' not in params or
                params['created'] is None):
            raise ValueError("Missing the required parameter `created` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'redirect' is set
        if ('redirect' not in params or
                params['redirect'] is None):
            raise ValueError("Missing the required parameter `redirect` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'institution_id' is set
        if ('institution_id' not in params or
                params['institution_id'] is None):
            raise ValueError("Missing the required parameter `institution_id` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'agreement' is set
        if ('agreement' not in params or
                params['agreement'] is None):
            raise ValueError("Missing the required parameter `agreement` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'reference' is set
        if ('reference' not in params or
                params['reference'] is None):
            raise ValueError("Missing the required parameter `reference` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'accounts' is set
        if ('accounts' not in params or
                params['accounts'] is None):
            raise ValueError("Missing the required parameter `accounts` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'user_language' is set
        if ('user_language' not in params or
                params['user_language'] is None):
            raise ValueError("Missing the required parameter `user_language` when calling `requisition_created`")  # noqa: E501
        # verify the required parameter 'link' is set
        if ('link' not in params or
                params['link'] is None):
            raise ValueError("Missing the required parameter `link` when calling `requisition_created`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'redirect' in params:
            form_params.append(('redirect', params['redirect']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'agreement' in params:
            form_params.append(('agreement', params['agreement']))  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'accounts' in params:
            form_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'user_language' in params:
            form_params.append(('user_language', params['user_language']))  # noqa: E501
        if 'link' in params:
            form_params.append(('link', params['link']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'redirect' in params:
            form_params.append(('redirect', params['redirect']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'agreement' in params:
            form_params.append(('agreement', params['agreement']))  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'accounts' in params:
            form_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'user_language' in params:
            form_params.append(('user_language', params['user_language']))  # noqa: E501
        if 'link' in params:
            form_params.append(('link', params['link']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/requisitions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpectacularRequisitionV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_requisitions(self, **kwargs):  # noqa: E501
        """retrieve_all_requisitions  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_requisitions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedRequisitionV2List
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_requisitions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_requisitions_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all_requisitions_with_http_info(self, **kwargs):  # noqa: E501
        """retrieve_all_requisitions  # noqa: E501

        API endpoints related to requisitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_requisitions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedRequisitionV2List
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_requisitions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/requisitions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedRequisitionV2List',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
