# coding: utf-8

"""
    Nordigen Account Information Services API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nordigen.api_client import ApiClient


class AgreementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accept_eua(self, body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs):  # noqa: E501
        """accept_eua  # noqa: E501

        Accept an end-user agreement via the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_eua(body, user_agent2, ip_address2, user_agent, ip_address, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnduserAcceptanceDetails body: (required)
        :param str user_agent2: (required)
        :param str ip_address2: (required)
        :param str user_agent: (required)
        :param str ip_address: (required)
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs)  # noqa: E501
            return data

    def accept_eua_with_http_info(self, body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs):  # noqa: E501
        """accept_eua  # noqa: E501

        Accept an end-user agreement via the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnduserAcceptanceDetails body: (required)
        :param str user_agent2: (required)
        :param str ip_address2: (required)
        :param str user_agent: (required)
        :param str ip_address: (required)
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_agent2', 'ip_address2', 'user_agent', 'ip_address', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_eua" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'user_agent2' is set
        if ('user_agent2' not in params or
                params['user_agent2'] is None):
            raise ValueError("Missing the required parameter `user_agent2` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'ip_address2' is set
        if ('ip_address2' not in params or
                params['ip_address2'] is None):
            raise ValueError("Missing the required parameter `ip_address2` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accept_eua`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_agent' in params:
            form_params.append(('user_agent', params['user_agent']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ip_address', params['ip_address']))  # noqa: E501
        if 'user_agent' in params:
            form_params.append(('user_agent', params['user_agent']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ip_address', params['ip_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/{id}/accept/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accept_eua(self, body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs):  # noqa: E501
        """accept_eua  # noqa: E501

        Accept an end-user agreement via the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_eua(body, user_agent2, ip_address2, user_agent, ip_address, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnduserAcceptanceDetails body: (required)
        :param str user_agent2: (required)
        :param str ip_address2: (required)
        :param str user_agent: (required)
        :param str ip_address: (required)
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs)  # noqa: E501
            return data

    def accept_eua_with_http_info(self, body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs):  # noqa: E501
        """accept_eua  # noqa: E501

        Accept an end-user agreement via the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnduserAcceptanceDetails body: (required)
        :param str user_agent2: (required)
        :param str ip_address2: (required)
        :param str user_agent: (required)
        :param str ip_address: (required)
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_agent2', 'ip_address2', 'user_agent', 'ip_address', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_eua" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'user_agent2' is set
        if ('user_agent2' not in params or
                params['user_agent2'] is None):
            raise ValueError("Missing the required parameter `user_agent2` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'ip_address2' is set
        if ('ip_address2' not in params or
                params['ip_address2'] is None):
            raise ValueError("Missing the required parameter `ip_address2` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accept_eua`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_agent' in params:
            form_params.append(('user_agent', params['user_agent']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ip_address', params['ip_address']))  # noqa: E501
        if 'user_agent' in params:
            form_params.append(('user_agent', params['user_agent']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ip_address', params['ip_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/{id}/accept/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accept_eua(self, body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs):  # noqa: E501
        """accept_eua  # noqa: E501

        Accept an end-user agreement via the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_eua(body, user_agent2, ip_address2, user_agent, ip_address, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnduserAcceptanceDetails body: (required)
        :param str user_agent2: (required)
        :param str ip_address2: (required)
        :param str user_agent: (required)
        :param str ip_address: (required)
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs)  # noqa: E501
            return data

    def accept_eua_with_http_info(self, body, user_agent2, ip_address2, user_agent, ip_address, id, **kwargs):  # noqa: E501
        """accept_eua  # noqa: E501

        Accept an end-user agreement via the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_eua_with_http_info(body, user_agent2, ip_address2, user_agent, ip_address, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnduserAcceptanceDetails body: (required)
        :param str user_agent2: (required)
        :param str ip_address2: (required)
        :param str user_agent: (required)
        :param str ip_address: (required)
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_agent2', 'ip_address2', 'user_agent', 'ip_address', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_eua" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'user_agent2' is set
        if ('user_agent2' not in params or
                params['user_agent2'] is None):
            raise ValueError("Missing the required parameter `user_agent2` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'ip_address2' is set
        if ('ip_address2' not in params or
                params['ip_address2'] is None):
            raise ValueError("Missing the required parameter `ip_address2` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `accept_eua`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accept_eua`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_agent' in params:
            form_params.append(('user_agent', params['user_agent']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ip_address', params['ip_address']))  # noqa: E501
        if 'user_agent' in params:
            form_params.append(('user_agent', params['user_agent']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ip_address', params['ip_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/{id}/accept/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_eua_v2(self, body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs):  # noqa: E501
        """create_eua_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_eua_v2(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserAgreement body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param int max_historical_days2: (required)
        :param int access_valid_for_days2: (required)
        :param list[str] access_scope2: (required)
        :param datetime accepted2: (required)
        :param str institution_id2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param int max_historical_days: (required)
        :param int access_valid_for_days: (required)
        :param list[str] access_scope: (required)
        :param datetime accepted: (required)
        :param str institution_id: (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs)  # noqa: E501
            return data

    def create_eua_v2_with_http_info(self, body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs):  # noqa: E501
        """create_eua_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserAgreement body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param int max_historical_days2: (required)
        :param int access_valid_for_days2: (required)
        :param list[str] access_scope2: (required)
        :param datetime accepted2: (required)
        :param str institution_id2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param int max_historical_days: (required)
        :param int access_valid_for_days: (required)
        :param list[str] access_scope: (required)
        :param datetime accepted: (required)
        :param str institution_id: (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id2', 'created2', 'max_historical_days2', 'access_valid_for_days2', 'access_scope2', 'accepted2', 'institution_id2', 'id', 'created', 'max_historical_days', 'access_valid_for_days', 'access_scope', 'accepted', 'institution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_eua_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'created2' is set
        if ('created2' not in params or
                params['created2'] is None):
            raise ValueError("Missing the required parameter `created2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'max_historical_days2' is set
        if ('max_historical_days2' not in params or
                params['max_historical_days2'] is None):
            raise ValueError("Missing the required parameter `max_historical_days2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_valid_for_days2' is set
        if ('access_valid_for_days2' not in params or
                params['access_valid_for_days2'] is None):
            raise ValueError("Missing the required parameter `access_valid_for_days2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_scope2' is set
        if ('access_scope2' not in params or
                params['access_scope2'] is None):
            raise ValueError("Missing the required parameter `access_scope2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'accepted2' is set
        if ('accepted2' not in params or
                params['accepted2'] is None):
            raise ValueError("Missing the required parameter `accepted2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'institution_id2' is set
        if ('institution_id2' not in params or
                params['institution_id2'] is None):
            raise ValueError("Missing the required parameter `institution_id2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'created' is set
        if ('created' not in params or
                params['created'] is None):
            raise ValueError("Missing the required parameter `created` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'max_historical_days' is set
        if ('max_historical_days' not in params or
                params['max_historical_days'] is None):
            raise ValueError("Missing the required parameter `max_historical_days` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_valid_for_days' is set
        if ('access_valid_for_days' not in params or
                params['access_valid_for_days'] is None):
            raise ValueError("Missing the required parameter `access_valid_for_days` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_scope' is set
        if ('access_scope' not in params or
                params['access_scope'] is None):
            raise ValueError("Missing the required parameter `access_scope` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'accepted' is set
        if ('accepted' not in params or
                params['accepted'] is None):
            raise ValueError("Missing the required parameter `accepted` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'institution_id' is set
        if ('institution_id' not in params or
                params['institution_id'] is None):
            raise ValueError("Missing the required parameter `institution_id` when calling `create_eua_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'max_historical_days' in params:
            form_params.append(('max_historical_days', params['max_historical_days']))  # noqa: E501
        if 'access_valid_for_days' in params:
            form_params.append(('access_valid_for_days', params['access_valid_for_days']))  # noqa: E501
        if 'access_scope' in params:
            form_params.append(('access_scope', params['access_scope']))  # noqa: E501
            collection_formats['access_scope'] = 'multi'  # noqa: E501
        if 'accepted' in params:
            form_params.append(('accepted', params['accepted']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'max_historical_days' in params:
            form_params.append(('max_historical_days', params['max_historical_days']))  # noqa: E501
        if 'access_valid_for_days' in params:
            form_params.append(('access_valid_for_days', params['access_valid_for_days']))  # noqa: E501
        if 'access_scope' in params:
            form_params.append(('access_scope', params['access_scope']))  # noqa: E501
            collection_formats['access_scope'] = 'multi'  # noqa: E501
        if 'accepted' in params:
            form_params.append(('accepted', params['accepted']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_eua_v2(self, body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs):  # noqa: E501
        """create_eua_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_eua_v2(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserAgreement body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param int max_historical_days2: (required)
        :param int access_valid_for_days2: (required)
        :param list[str] access_scope2: (required)
        :param datetime accepted2: (required)
        :param str institution_id2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param int max_historical_days: (required)
        :param int access_valid_for_days: (required)
        :param list[str] access_scope: (required)
        :param datetime accepted: (required)
        :param str institution_id: (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs)  # noqa: E501
            return data

    def create_eua_v2_with_http_info(self, body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs):  # noqa: E501
        """create_eua_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserAgreement body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param int max_historical_days2: (required)
        :param int access_valid_for_days2: (required)
        :param list[str] access_scope2: (required)
        :param datetime accepted2: (required)
        :param str institution_id2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param int max_historical_days: (required)
        :param int access_valid_for_days: (required)
        :param list[str] access_scope: (required)
        :param datetime accepted: (required)
        :param str institution_id: (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id2', 'created2', 'max_historical_days2', 'access_valid_for_days2', 'access_scope2', 'accepted2', 'institution_id2', 'id', 'created', 'max_historical_days', 'access_valid_for_days', 'access_scope', 'accepted', 'institution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_eua_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'created2' is set
        if ('created2' not in params or
                params['created2'] is None):
            raise ValueError("Missing the required parameter `created2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'max_historical_days2' is set
        if ('max_historical_days2' not in params or
                params['max_historical_days2'] is None):
            raise ValueError("Missing the required parameter `max_historical_days2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_valid_for_days2' is set
        if ('access_valid_for_days2' not in params or
                params['access_valid_for_days2'] is None):
            raise ValueError("Missing the required parameter `access_valid_for_days2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_scope2' is set
        if ('access_scope2' not in params or
                params['access_scope2'] is None):
            raise ValueError("Missing the required parameter `access_scope2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'accepted2' is set
        if ('accepted2' not in params or
                params['accepted2'] is None):
            raise ValueError("Missing the required parameter `accepted2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'institution_id2' is set
        if ('institution_id2' not in params or
                params['institution_id2'] is None):
            raise ValueError("Missing the required parameter `institution_id2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'created' is set
        if ('created' not in params or
                params['created'] is None):
            raise ValueError("Missing the required parameter `created` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'max_historical_days' is set
        if ('max_historical_days' not in params or
                params['max_historical_days'] is None):
            raise ValueError("Missing the required parameter `max_historical_days` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_valid_for_days' is set
        if ('access_valid_for_days' not in params or
                params['access_valid_for_days'] is None):
            raise ValueError("Missing the required parameter `access_valid_for_days` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_scope' is set
        if ('access_scope' not in params or
                params['access_scope'] is None):
            raise ValueError("Missing the required parameter `access_scope` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'accepted' is set
        if ('accepted' not in params or
                params['accepted'] is None):
            raise ValueError("Missing the required parameter `accepted` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'institution_id' is set
        if ('institution_id' not in params or
                params['institution_id'] is None):
            raise ValueError("Missing the required parameter `institution_id` when calling `create_eua_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'max_historical_days' in params:
            form_params.append(('max_historical_days', params['max_historical_days']))  # noqa: E501
        if 'access_valid_for_days' in params:
            form_params.append(('access_valid_for_days', params['access_valid_for_days']))  # noqa: E501
        if 'access_scope' in params:
            form_params.append(('access_scope', params['access_scope']))  # noqa: E501
            collection_formats['access_scope'] = 'multi'  # noqa: E501
        if 'accepted' in params:
            form_params.append(('accepted', params['accepted']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'max_historical_days' in params:
            form_params.append(('max_historical_days', params['max_historical_days']))  # noqa: E501
        if 'access_valid_for_days' in params:
            form_params.append(('access_valid_for_days', params['access_valid_for_days']))  # noqa: E501
        if 'access_scope' in params:
            form_params.append(('access_scope', params['access_scope']))  # noqa: E501
            collection_formats['access_scope'] = 'multi'  # noqa: E501
        if 'accepted' in params:
            form_params.append(('accepted', params['accepted']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_eua_v2(self, body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs):  # noqa: E501
        """create_eua_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_eua_v2(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserAgreement body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param int max_historical_days2: (required)
        :param int access_valid_for_days2: (required)
        :param list[str] access_scope2: (required)
        :param datetime accepted2: (required)
        :param str institution_id2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param int max_historical_days: (required)
        :param int access_valid_for_days: (required)
        :param list[str] access_scope: (required)
        :param datetime accepted: (required)
        :param str institution_id: (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs)  # noqa: E501
            return data

    def create_eua_v2_with_http_info(self, body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, **kwargs):  # noqa: E501
        """create_eua_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_eua_v2_with_http_info(body, id2, created2, max_historical_days2, access_valid_for_days2, access_scope2, accepted2, institution_id2, id, created, max_historical_days, access_valid_for_days, access_scope, accepted, institution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserAgreement body: (required)
        :param str id2: (required)
        :param datetime created2: (required)
        :param int max_historical_days2: (required)
        :param int access_valid_for_days2: (required)
        :param list[str] access_scope2: (required)
        :param datetime accepted2: (required)
        :param str institution_id2: (required)
        :param str id: (required)
        :param datetime created: (required)
        :param int max_historical_days: (required)
        :param int access_valid_for_days: (required)
        :param list[str] access_scope: (required)
        :param datetime accepted: (required)
        :param str institution_id: (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id2', 'created2', 'max_historical_days2', 'access_valid_for_days2', 'access_scope2', 'accepted2', 'institution_id2', 'id', 'created', 'max_historical_days', 'access_valid_for_days', 'access_scope', 'accepted', 'institution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_eua_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'created2' is set
        if ('created2' not in params or
                params['created2'] is None):
            raise ValueError("Missing the required parameter `created2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'max_historical_days2' is set
        if ('max_historical_days2' not in params or
                params['max_historical_days2'] is None):
            raise ValueError("Missing the required parameter `max_historical_days2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_valid_for_days2' is set
        if ('access_valid_for_days2' not in params or
                params['access_valid_for_days2'] is None):
            raise ValueError("Missing the required parameter `access_valid_for_days2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_scope2' is set
        if ('access_scope2' not in params or
                params['access_scope2'] is None):
            raise ValueError("Missing the required parameter `access_scope2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'accepted2' is set
        if ('accepted2' not in params or
                params['accepted2'] is None):
            raise ValueError("Missing the required parameter `accepted2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'institution_id2' is set
        if ('institution_id2' not in params or
                params['institution_id2'] is None):
            raise ValueError("Missing the required parameter `institution_id2` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'created' is set
        if ('created' not in params or
                params['created'] is None):
            raise ValueError("Missing the required parameter `created` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'max_historical_days' is set
        if ('max_historical_days' not in params or
                params['max_historical_days'] is None):
            raise ValueError("Missing the required parameter `max_historical_days` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_valid_for_days' is set
        if ('access_valid_for_days' not in params or
                params['access_valid_for_days'] is None):
            raise ValueError("Missing the required parameter `access_valid_for_days` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'access_scope' is set
        if ('access_scope' not in params or
                params['access_scope'] is None):
            raise ValueError("Missing the required parameter `access_scope` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'accepted' is set
        if ('accepted' not in params or
                params['accepted'] is None):
            raise ValueError("Missing the required parameter `accepted` when calling `create_eua_v2`")  # noqa: E501
        # verify the required parameter 'institution_id' is set
        if ('institution_id' not in params or
                params['institution_id'] is None):
            raise ValueError("Missing the required parameter `institution_id` when calling `create_eua_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'max_historical_days' in params:
            form_params.append(('max_historical_days', params['max_historical_days']))  # noqa: E501
        if 'access_valid_for_days' in params:
            form_params.append(('access_valid_for_days', params['access_valid_for_days']))  # noqa: E501
        if 'access_scope' in params:
            form_params.append(('access_scope', params['access_scope']))  # noqa: E501
            collection_formats['access_scope'] = 'multi'  # noqa: E501
        if 'accepted' in params:
            form_params.append(('accepted', params['accepted']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'created' in params:
            form_params.append(('created', params['created']))  # noqa: E501
        if 'max_historical_days' in params:
            form_params.append(('max_historical_days', params['max_historical_days']))  # noqa: E501
        if 'access_valid_for_days' in params:
            form_params.append(('access_valid_for_days', params['access_valid_for_days']))  # noqa: E501
        if 'access_scope' in params:
            form_params.append(('access_scope', params['access_scope']))  # noqa: E501
            collection_formats['access_scope'] = 'multi'  # noqa: E501
        if 'accepted' in params:
            form_params.append(('accepted', params['accepted']))  # noqa: E501
        if 'institution_id' in params:
            form_params.append(('institution_id', params['institution_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_eua_by_id_v2(self, id, **kwargs):  # noqa: E501
        """delete_eua_by_id_v2  # noqa: E501

        Delete End User Agreement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_eua_by_id_v2(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: dict(str, Object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_eua_by_id_v2_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_eua_by_id_v2_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_eua_by_id_v2_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_eua_by_id_v2  # noqa: E501

        Delete End User Agreement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_eua_by_id_v2_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: dict(str, Object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_eua_by_id_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_eua_by_id_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, Object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_eu_as_for_an_end_user_v2(self, **kwargs):  # noqa: E501
        """retrieve_all_eu_as_for_an_end_user_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_eu_as_for_an_end_user_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedEndUserAgreementList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_eu_as_for_an_end_user_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_eu_as_for_an_end_user_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all_eu_as_for_an_end_user_v2_with_http_info(self, **kwargs):  # noqa: E501
        """retrieve_all_eu_as_for_an_end_user_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_eu_as_for_an_end_user_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedEndUserAgreementList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_eu_as_for_an_end_user_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedEndUserAgreementList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_eua_by_id_v2(self, id, **kwargs):  # noqa: E501
        """retrieve_eua_by_id_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_eua_by_id_v2(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_eua_by_id_v2_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_eua_by_id_v2_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_eua_by_id_v2_with_http_info(self, id, **kwargs):  # noqa: E501
        """retrieve_eua_by_id_v2  # noqa: E501

        API endpoints related to end-user agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_eua_by_id_v2_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: EndUserAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_eua_by_id_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_eua_by_id_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_eua_text(self, id, **kwargs):  # noqa: E501
        """retrieve_eua_text  # noqa: E501

        Show the text of the end-user agreement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_eua_text(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_eua_text_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_eua_text_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_eua_text_with_http_info(self, id, **kwargs):  # noqa: E501
        """retrieve_eua_text  # noqa: E501

        Show the text of the end-user agreement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_eua_text_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this end user agreement. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_eua_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_eua_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/agreements/enduser/{id}/text/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
